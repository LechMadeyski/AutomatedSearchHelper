Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Tradenames,Manufacturers,Funding Details,Funding Text 1,Funding Text 2,References,Correspondence Address,Editors,Sponsors,Publisher,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Access Type,Source,EID
"Pinheiro P., Viana J.C., Ribeiro M., Fernandes L., Ferrari F., Gheyi R., Fonseca B.",57204471825;57204468857;57199329234;57200582763;57189412126;8365747700;36175426900;,Mutating code annotations: An empirical evaluation on Java and C# programs,2020,Science of Computer Programming,191,,102418,,,,,10.1016/j.scico.2020.102418,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079538573&doi=10.1016%2fj.scico.2020.102418&partnerID=40&md5=aa11976a62f58aaed12bcb30072c0ba9,"Computing Institute, UFAL, Maceió, AL, Brazil; Informatics Coord., IFAL, Maceió, AL, Brazil; Computing Department, UFSCar, São Carlos, SP, Brazil; Department of Computing and Systems, UFCG, Campina Grande, PB, Brazil","Pinheiro, P., Computing Institute, UFAL, Maceió, AL, Brazil; Viana, J.C., Computing Institute, UFAL, Maceió, AL, Brazil; Ribeiro, M., Computing Institute, UFAL, Maceió, AL, Brazil; Fernandes, L., Informatics Coord., IFAL, Maceió, AL, Brazil; Ferrari, F., Computing Department, UFSCar, São Carlos, SP, Brazil; Gheyi, R., Department of Computing and Systems, UFCG, Campina Grande, PB, Brazil; Fonseca, B., Computing Institute, UFAL, Maceió, AL, Brazil","Mutation testing injects code changes to check whether tests can detect them. Mutation testing tools use mutation operators that modify program elements such as operators, names, and entire statements. Most existing mutation operators focus on imperative and object-oriented language constructs. However, many current projects use meta-programming through code annotations. In a previous work, we have proposed nine mutation operators for code annotations focused on the Java programming language. In this article, we extend our previous work by mapping the operators to the C# language. Moreover, we enlarge the empirical evaluation. In particular, we mine Java and C# projects that make heavy use of annotations to identify annotation-related faults. We analyzed 200 faults and categorized them as “misuse,” when the developer did not appear to know how to use the code annotations properly, and “wrong annotation parsing” when the developer incorrectly parsed annotation code (by using reflection, for example). Our operators mimic 95% of the 200 mined faults. In particular, three operators can mimic 82% of the faults in Java projects and 84% of the faults in C# projects. In addition, we provide an extended and improved repository hosted on GitHub with the 200 code annotation faults we analyzed. We organize the repository according to the type of errors made by the programmers while dealing with code annotations, and to the mutation operator that can mimic the faults. Last but not least, we also provide a mutation engine, based on these operators, which is publicly available and can be incorporated into existing or new mutation tools. The engine works for Java and C#. As implications for practice, our operators can help developers to improve test suites and parsers of annotated code. © 2020 Elsevier B.V.",Code annotations; Mining bugs; Mutation testing,Engines; Object oriented programming; Software testing; Technology transfer; Code annotation; Code changes; Current projects; Empirical evaluations; Meta Programming; Mutation operators; Mutation testing; Program elements; Java programming language,,,,,"Conselho Nacional de Desenvolvimento CientÃ­fico e TecnolÃ³gico, CNPq: 306310/2016-3, 309844/2018-5, 426005/2018-0, 311442/2019-6, 421306/2018-1

CoordenaÃ§Ã£o de AperfeiÃ§oamento de Pessoal de NÃ­vel Superior, CAPES: 117875, 175956

FundaÃ§Ã£o de Amparo Ã  Pesquisa do Estado de SÃ£o Paulo, FAPESP: 2016/21251-0

Instituto Nacional de CiÃªncia e Tecnologia para Engenharia de Software, INES: 65614/2014-0","This work was partially funded by CNPq (421306/2018-1, 426005/2018-0, 309844/2018-5, 311442/2019-6, and 306310/2016-3), CAPES grants (175956 and 117875), and FAPESP (grant 2016/21251-0). This research was also partially funded by INES 2.0, CNPq grant 65614/2014-0.",,"Acree, A.T., Budd, T.A., DeMillo, R.A., Lipton, R.J., Sayward, F.G., Mutation analysis (1979), Technical Report GIT-ICS-79/08 School of Information and Computer Science, Georgia Institute of Technology Atlanta, GA, USA; Agrawal, H., DeMillo, R.A., Hathaway, R., Hsu, W., Hsu, W., Krauser, E.W., Martin, R.J., Spafford, E.H., Design of mutant operators for the C programming language (1989), Technical Report SERC-TR41-P Software Engineering Research Center, Purdue University West Lafayette, IN, USA; Al-Hajjaji, M., Benduhn, F., Thüm, T., Leich, T., Saake, G., Mutation operators for preprocessor-based variability (2016) Proceedings of the 10th International Workshop on Variability Modelling of Software-Intensive Systems (VaMoS), Salvador, BA, Brazil, pp. 81-88. , ACM Press New York; Ammann, P., Delamaro, M.E., Offutt, J., Establishing theoretical minimal sets of mutants (2014) Proceedings of the International Conference on Software Testing, Verification, and Validation (ICST), Cleveland, OH, USA, pp. 21-30. , IEEE; Andrews, J.H., Briand, L.C., Labiche, Y., Is mutation an appropriate tool for testing experiments? (2005) Proceedings of the 27th International Conference on Software Engineering (ICSE), St. Louis, MO, USA, pp. 402-411. , ACM Press; Araújo, C.A., Delamaro, M.E., Maldonado, J.C., Vincenzi, A.M.R., Correlating automatic static analysis and mutation testing: towards incremental strategies (2016) J. Softw. Eng. Res. Dev., 4; Baudry, B., Fleurey, F., Jézéquel, J.-M., Le Traon, Y., From genetic to bacteriological algorithms for mutation-based testing (2005) Softw. Test. Verif. Reliab., 15 (2), pp. 73-96; Bauer, C., King, G., Java Persistence with Hibernate (2006), Manning Publications Co. Shelter Island, NY, USA; Bradbury, J., Cordy, J., Dingel, J., Mutation operators for concurrent Java (J2SE 5.0) (2006) Proceedings of the 2nd Workshop on Mutation Analysis (Mutation), Raleigh, NC, USA, , Kluwer Academic Publishers; Chekam, T.T., Papadakis, M., Le Traon, Y., Harman, M., An empirical study on mutation, statement and branch coverage fault revelation that avoids the unreliable clean program assumption (2017) Proceedings of the 39th International Conference on Software Engineering (ICSE), Buenos Aires, Argentina, pp. 597-608. , IEEE; Chevalley, P., Applying mutation analysis for object-oriented programs using a reflective approach (2001) Proceedings of the 8th Asia-Pacific Software Engineering Conference (APSEC), Macao, China, pp. 267-270. , IEEE; Coles, H., PITest mutation testing tool for Java (2019), http://pitest.org/; Coles, H., Laurent, T., Henard, C., Papadakis, M., Ventresque, A., PIT: a practical mutation testing tool for Java (demo) (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis. ISSTA 2016, Saarbrücken, Germany, pp. 449-452. , ACM Press; Córdoba-Sánchez, I., de Lara, J., Ann: a domain-specific language for the effective design and validation of Java annotations (2016) Comput. Lang. Syst. Struct., 45, pp. 164-190; Daran, M., Thévenod-Fosse, P., Software error analysis: a real case study involving real faults and mutations (1996) Proceedings of the 1996 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), San Diego, CA, USA, pp. 158-171. , ACM Press; Darwin, I., AnnaBot: a static verifier for Java annotation usage (2010) Adv. Softw. Eng., pp. 1-7; Delamaro, M.E., Pezzè, M., Vincenzi, A.M.R., Maldonado, J.C., Mutant operator for testing concurrent Java programs (2001) Proceedings of the 15th Brazilian Symposium on Software Engineering (SBES), pp. 386-391. , Brazilian Computer Society Rio de Janeiro, RJ, Brasil; Delgado-Pérez, P., Medina-Bulo, I., Palomo-Lozano, F., García-Domínguez, A., Domínguez-Jiménez, J., Assessment of class mutation operators for C++ with the MuCPP mutation system (2017) Inf. Softw. Technol., 81, pp. 169-184; DeMillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: help for the practicing programmer (1978) IEEE Comput., 11 (4), pp. 34-43; Deng, L., Mirzaei, N., Ammann, P., Offutt, J., Towards mutation analysis of Android apps (2015) Proceedings of the 10th International Workshop on Mutation Analysis (Mutation), Graz, Austria, pp. 1-10. , IEEE; Derezińska, A., Advanced mutation operators applicable in C# programs (2006) Software Engineering Techniques: Design for Quality, pp. 283-288. , K. Sacha Springer-Verlag Boston, MA; Derezińska, A., Quality assessment of mutation operators dedicated for C# programs (2006) Proceedings of the International Conference on Quality Software (QSIC), Beijing, China, pp. 227-234. , IEEE; Derezinska, A., Kowalski, K., Object-oriented mutation applied in common intermediate language programs originated from C# (2011) Proceedings of the 6th International Workshop on Mutation Analysis (Mutation), Berlin, Germany, pp. 342-350. , IEEE; Estero-Botaro, A., Palomo-Lozano, F., Medina-Bulo, I., Quantitative evaluation of mutation operators for WS-BPEL compositions (2010) Proceedings of the 5th International Workshop on Mutation Analysis (Mutation), Paris, France, pp. 142-150. , IEEE; Fernandes, L., Ribeiro, M., Carvalho, L., Gheyi, R., Mongiovi, M., Santos, A., Cavalcanti, A., Maldonado, J., Avoiding useless mutants (2017) Proceedings of the 16th International Conference on Generative Programming: Concepts & Experience (GPCE), Vancouver, BC, Canada, pp. 187-198. , ACM Press; Ferrari, F.C., Maldonado, J.C., Rashid, A., Mutation testing for aspect-oriented programs (2008) Proceedings of the 1st International Conference on Software Testing, Verification, and Validation (ICST), Lillehammer, Norway, pp. 52-61. , IEEE; GitHub Inc., Github search REST API v3 (2019), https://developer.github.com/v3/search/; Hamlet, R.G., Testing programs with the aid of a compiler (1977) IEEE Trans. Softw. Eng., 3 (4), pp. 279-290; Jia, Y., Harman, M., Higher order mutation testing (2009) Inf. Softw. Technol. J., 51 (10), pp. 1379-1393; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678; Johnson, R., Hoeller, J., Arendsen, A., Sampaleanu, C., Harrop, R., Risberg, T., Davison, D., Evans, R., Spring - Java/J2EE application framework (2006) Reference Manual Version 2.0.2, , Interface21 Ltd; Just, R., The MAJOR mutation framework: efficient and scalable mutation analysis for Java (2014) Proceedings of the 23rd International Symposium on Software Testing and Analysis (ISSTA), San Jose, CA, USA, pp. 433-436. , ACM Press; Just, R., Jalali, D., Inozemtseva, L., Ernst, M., Holmes, R., Fraser, G., Are mutants a valid substitute for real faults in software testing? (2014) Proceedings of the 22nd SIGSOFT International Symposium on Foundations of Software Engineering (FSE), Hong Kong, China, pp. 654-665. , ACM Press; Ma, Y.-S., Kwon, Y.-R., Offutt, A.J., Inter-class mutation operators for Java (2002) Proceedings of the 13th International Symposium on Software Reliability Engineering (ISSRE), Annapolis, MD, USA, pp. 352-366. , IEEE; Ma, Y.-S., Offutt, A.J., Kwon, Y.-R., MuJava: an automated class mutation system (2005) Softw. Test. Verif. Reliab., 15 (2), pp. 97-133; Madeyski, L., Orzeszyna, W., Torkar, R., Jozala, M., Overcoming the equivalent mutant problem: a systematic literature review and a comparative experiment of second order mutation (2014) IEEE Trans. Softw. Eng., 40 (1), pp. 23-42; Mathur, A.P., Foundations of Software Testing (2007), 1st edition Addison-Wesley Toronto, ON, Canada; Noguera, C., Pawlak, R., Aval: an extensible attribute-oriented programming validator for Java (2007) J. Softw. Maint. Evol., 19 (4), pp. 253-275; (2018), http://nunit.org/; Offutt, A.J., Untch, R.H., Mutation 2000: uniting the orthogonal (2000) Proceedings of the Mutation 2000 Symposium, San Jose, CA, USA, pp. 34-44. , Kluwer Academic Publishers; Papadakis, M., Jia, Y., Harman, M., Le Traon, Y., Trivial compiler equivalence: a large scale empirical study of a simple, fast and effective equivalent mutant detection technique (2015) Proceedings of the 37th International Conference on Software Engineering (ICSE), Florence, Italy, pp. 936-946. , ACM Press; Papadakis, M., Kintis, M., Zhang, J., Jia, Y., Le Traon, Y., Harman, M., Mutation testing advances: an analysis and survey (2019) Advances in Computers, vol.112, pp. 275-378. , A.M. Memon Elsevier Amsterdam, the Netherlands; Petrović, G., Ivanković, M., Kurtz, B., Ammann, P., Just, R., An industrial application of mutation testing: lessons, challenges, and research directions (2018) Proceedings of the 13th International Workshop on Mutation Analysis (Mutation), Västerås, Sweden, pp. 47-53. , IEEE; Pinheiro, P., Viana, J.C., Fernandes, L., Ribeiro, M., Ferrari, F.C., Fonseca, B., Gheyi, R., Mutation operators for code annotations (2018) Proceedings of the 3rd Brazilian Symposium on Systematic and Automated Software Testing (SAST), São Carlos, SP Brazil, pp. 77-86. , ACM Press; Trzpil, P., VisualMutator - NET mutation testing (2019), https://visualmutator.github.io/web/; Pizzoleto, A.V., Ferrari, F.C., Offutt, A.J., Fernandes, L., Ribeiro, M., A systematic literature review of techniques and metrics to reduce the cost of mutation testing (2019) J. Syst. Softw., 157; Rocha, H., Valente, M.T., How annotations are used in Java: an empirical study (2011) Proceedings of the 23rd International Conference on Software Engineering and Knowledge Engineering (SEKE), pp. 426-431. , Knowledge Systems Institute Graduate School Miami Beach, FL, USA; Schuler, D., Zeller, A., Covering and uncovering equivalent mutants (2013) Softw. Test. Verif. Reliab., 23 (5), pp. 353-374; Sullivan, A., Wang, K., Zaeem, R.N., Khurshid, S., Automated test generation and mutation testing for Alloy (2017) Proceedings of the International Conference on Software Testing, Verification and Validation (ICST), Tokyo, Japan, pp. 264-275. , IEEE; Tahchiev, P., Leme, F., Massol, V., Gregory, G., JUnit in Action (2010), 2nd edition Manning Publications Co. Shelter Island, NY, USA; Wohlin, C., Runeson, P., Host, M., Ohlsson, M.C., Regnell, B., Wesslén, A., Experimentation in Software Engineering: An Introduction (2000), Kluwer Academic Publishers","Ribeiro, M.; Computing Institute, UFALBrazil; email: marcio@ic.ufal.br",,,Elsevier B.V.,,,,,01676423,,SCPGD,,English,Sci Comput Program,Article,Final,,Scopus,2-s2.0-85079538573
"Braiek H.B., Khomh F.",57203412343;24724747600;,On testing machine learning programs,2020,Journal of Systems and Software,164,,110542,,,,,10.1016/j.jss.2020.110542,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081030171&doi=10.1016%2fj.jss.2020.110542&partnerID=40&md5=0019441a753439c6d2a0513d3a102029,"SWAT Lab., Polytechnique Montréal, Canada","Braiek, H.B., SWAT Lab., Polytechnique Montréal, Canada; Khomh, F., SWAT Lab., Polytechnique Montréal, Canada","Nowadays, we are witnessing a wide adoption of Machine learning (ML) models in many software systems. They are even being tested in safety-critical systems, thanks to recent breakthroughs in deep learning and reinforcement learning. Many people are now interacting with systems based on ML every day, e.g., voice recognition systems used by virtual personal assistants like Amazon Alexa or Google Home. As the field of ML continues to grow, we are likely to witness transformative advances in a wide range of areas, from finance, energy, to health and transportation. Given this growing importance of ML-based systems in our daily life, it is becoming utterly important to ensure their reliability. Recently, software researchers have started adapting concepts from the software testing domain (e.g., code coverage, mutation testing, or property-based testing) to help ML engineers detect and correct faults in ML programs. This paper reviews current existing testing practices for ML programs. First, we identify and explain challenges that should be addressed when testing ML programs. Next, we report existing solutions found in the literature for testing ML programs. Finally, we identify gaps in the literature related to the testing of ML programs and make recommendations of future research directions for the scientific community. We hope that this comprehensive review of software testing practices will help ML engineers identify the right approach to improve the reliability of their ML-based systems. We also hope that the research community will act on our proposed research directions to advance the state of the art of testing for ML programs. © 2020",Data cleaning; Feature engineering testing; Implementation testing; Machine learning; Model testing,Deep learning; Learning systems; Reinforcement learning; Safety engineering; Software reliability; Data cleaning; Feature engineerings; Future research directions; Implementation testing; Model testing; Property based testing; Safety critical systems; Voice-recognition systems; Software testing,,,,,,,,"Angwin, J., Larson, J., Mattu, S., Kirchner, L., Machine bias (2016) ProPublica, May, 23; Ben Braiek, H., Khomh, F., Deepevolution: a search-based testing approach for deep neural networks (2019) 2019 IEEE International Conference on Software Maintenance and Evolution, , IEEE; Braiek, H.B., Khomh, F., Tfcheck: a tensorflow library for detecting training issues in neural network programs (2019) 2019 IEEE 19th International Conference on Software Quality, Reliability and Security (QRS), pp. 426-433. , IEEE; Calmon, F., Wei, D., Vinzamuri, B., Ramamurthy, K.N., Varshney, K.R., Optimized pre-processing for discrimination prevention (2017) Advances in Neural Information Processing Systems, pp. 3992-4001; Chen, T.Y., Cheung, S.C., Yiu, S.M., Metamorphic testing: a new approach for generating next test cases (1998) Technical Report, , Technical Report HKUST-CS98-01, Department of Computer Science, Hong Kong University of Science and Technology, Hong Kong; Doersch, C., (2016) Tutorial on variational autoencoders, , arXiv:; Dwarakanath, A., Ahuja, M., Sikand, S., Rao, R.M., Bose, R., Dubash, N., Podder, S., Identifying implementation bugs in machine learning based image classifiers using metamorphic testing (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 118-128. , ACM; Engstrom, L., Tsipras, D., Schmidt, L., Madry, A., (2017) A rotation and a translation suffice: fooling cnns with simple transformations, , arXiv:1712.02779; Fischer, A., Igel, C., An introduction to restricted boltzmann machines (2012) iberoamerican Congress on Pattern Recognition, pp. 14-36. , Springer; Galhotra, S., Brun, Y., Meliou, A., Fairness testing: testing software for discrimination (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 498-510. , ACM; Gibbs, S., https://www.theguardian.com/technology/2018/may/08/ubers-self-driving-car-saw-the-pedestrian-but-didnt-swerve-report; Gilmer, J., Adams, R.P., Goodfellow, I., Andersen, D., Dahl, G.E., (2018) Motivating the rules of the game for adversarial example research, , arXiv:; Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A., Bengio, Y., Generative adversarial nets (2014) Advances in neural information processing systems, pp. 2672-2680; Goodfellow, I.J., Shlens, J., Szegedy, C., (2014), Explaining and harnessing adversarial examples. arXiv:1412.6572; Gopinath, D., Păsăreanu, C.S., Wang, K., Zhang, M., Khurshid, S., Symbolic execution for attribution and attack synthesis in neural networks (2019) Proceedings of the 41st International Conference on Software Engineering: Companion Proceedings, pp. 282-283. , IEEE Press; Grosse, R.B., Duvenaud, D.K., (2014) Testing MCMC code, , arXiv:; Gu, S., Rigazio, L., (2014) Towards deep neural network architectures robust to adversarial examples, , arXiv:; Guo, J., Jiang, Y., Zhao, Y., Chen, Q., Sun, J., Dlfuzz: differential fuzzing testing of deep learning systems (2018) Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pp. 739-743. , ACM; Hall, M., Frank, E., Holmes, G., Pfahringer, B., Reutemann, P., Witten, I.H., The weka data mining software: an update (2009) ACM SIGKDD explorations newsletter, 11 (1), pp. 10-18; Hayhurst, K.J., A Practical Tutorial on Modified Condition/Decision Coverage (2001), DIANE Publishing; Hjelm, R.D., Jacob, A.P., Che, T., Trischler, A., Cho, K., Bengio, Y., (2017) Boundary-seeking generative adversarial networks, , arXiv:; Huang, S., Liu, E.-H., Hui, Z.-W., Tang, S.-Q., Zhang, S.-J., Challenges of testing machine learning applications. (2018) Int. J. Perform. Eng., 14 (6); Hynes, N., Sculley, D., Terry, M., The data linter: lightweight, automated sanity checking for ML data sets in NIPS MLSys (2017) Workshop; IBM, https://www.ibm.com/de-de/products/ilog-cplex-optimization-studio/details; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678; Jo, J., Bengio, Y., (2017) Measuring the tendency of CNNs to learn surface statistical regularities, , arXiv:; Karpathy, A., http://cs231n.github.io/neural-networks-3/; Kelly, D., Sanders, R., Assessing the quality of scientific software (2008) First International Workshop on Software Engineering for Computational Science andEngineering, , Citeseer; Kim, B., Wattenberg, M., Gilmer, J., Cai, C., Wexler, J., Viegas, F., Sayres, R., (2017) Interpretability beyond feature attribution: quantitative testing with concept activation vectors (tcav), , arXiv:1711.11279; Kim, J., Feldt, R., Yoo, S., (2018) Guiding deep learning system testing using surprise adequacy, , arXiv:; Krishnan, S., Franklin, M.J., Goldberg, K., Wu, E., (2017) Boostclean: automated error detection and repair for machine learning, , arXiv:1711.01299; Krishnan, S., Wang, J., Franklin, M.J., Goldberg, K., Kraska, T., Milo, T., Wu, E., Sampleclean: fast and reliable analytics on dirty data. (2015) IEEE Data Eng. Bull., 38 (3), pp. 59-75; Krishnan, S., Wang, J., Wu, E., Franklin, M.J., Goldberg, K., (2016) Activeclean: interactive data cleaning while learning convex loss models, , arXiv:1601.03797; Kurakin, A., Goodfellow, I., Bengio, S., (2016) Adversarial examples in the physical world, , arXiv:; Lahoti, P., Weikum, G., Gummadi, K.P., (2018) Ifair: learning individually fair data representations for algorithmic decision making, , arXiv:1806.01059; Ma, L., Juefei-Xu, F., Zhang, F., Sun, J., Xue, M., Li, B., Chen, C., Liu, Y., Deepgauge: multi-granularity testing criteria for deep learning systems (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pp. 120-131. , ACM; Ma, L., Zhang, F., Sun, J., Xue, M., Li, B., Juefei-Xu, F., Xie, C., Zhao, J., (2018) Deepmutation: mutation testing of deep learning systems, , arXiv:1805.05206; Ma, L., Zhang, F., Xue, M., Li, B., Liu, Y., Zhao, J., Wang, Y., (2018) Combinatorial testing for deep learning systems, , arXiv:; Ma, Y.-S., Offutt, J., Kwon, Y.R., Mujava: an automated class mutation system (2005) Softw. Test. Verificat. Reliab., 15 (2), pp. 97-133; Masuda, S., Ono, K., Yasue, T., Hosokawa, N., A survey of software quality for machine learning applications (2018) 2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 279-284. , IEEE; McDaniel, P., Papernot, N., Celik, Z.B., Machine learning in adversarial settings (2016) IEEE Secur. Privacy, 14 (3), pp. 68-72; McKeeman, W.M., Differential testing for software (1998) Digit. Tech. J., 10 (1), pp. 100-107; Moosavi-Dezfooli, S.-M., Fawzi, A., Frossard, P., Deepfool: a simple and accurate method to fool deep neural networks (2016) Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 2574-2582; Sculley, D., Phillips, T., Ebner, D., Chaudhary, V., Young, M., (2014), https://www.eecs.tufts.edu/~dsculley/papers/technical-debt.pdf, Machine learning: the high-interest credit card of technical debt; Murphy, C., Kaiser, G.E., Arias, M., (2007), An approach to software testing of machine learning applications, Proceedings of the 19th International Conference on Software Engineering & Knowledge Engineering, Technical Program; Nidhra, S., Dondeti, J., Black box and white box testing techniques-a literature review (2012) Int. J. Embed. Syst. Appl. (IJESA), 2 (2), pp. 29-50; Nie, C., Leung, H., A survey of combinatorial testing (2011) ACM Comput. Surv. (CSUR), 43 (2), p. 11; Odena, A., Goodfellow, I., (2018) Tensorfuzz: debugging neural networks with coverage-guided fuzzing, , arXiv:1807.10875; Murphy, C., Kaiser, G.E., Hu, L., (2008), Properties of machine learning applications for use in metamorphic testing, Proceedings of the 20th International Conference on Software Engineering & Knowledge Engineering, Technical Program; Olson, P., (2011), https://www.forbes.com/sites/parmyolson/2011/03/15/the-algorithm-that-beats-your-bank-manager/; Papernot, N., McDaniel, P., Jha, S., Fredrikson, M., Celik, Z.B., Swami, A., The limitations of deep learning in adversarial settings (2016) Security and Privacy (EuroS&P), 2016 IEEE European Symposium on, pp. 372-387. , IEEE; Pei, K., Cao, Y., Yang, J., Jana, S., Deepxplore: automated whitebox testing of deep learning systems (2017) Proceedings of the 26th Symposium on Operating Systems Principles, pp. 1-18. , ACM; Qi, Z., Wang, H., Li, J., Gao, H., (2018) Impacts of dirty data: and experimental evaluation, , arXiv:; Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D., Chaudhary, V., Dennison, D., Hidden technical debt in machine learning systems (2015) Advances in Neural Information Processing Systems, pp. 2503-2511; Selsam, D., Liang, P., Dill, D.L., (2017) Developing bug-free machine learning systems with formal mathematics, , arXiv:; Sen, K., Marinov, D., Agha, G., Cute: a concolic unit testing engine for c (2005) ACM SIGSOFT Software Engineering Notes, 30, pp. 263-272. , ACM; Strickland, E., Doc bot preps for the or (2016) IEEE Spectr, 53 (6), pp. 32-60; Sun, Y., Huang, X., Kroening, D., (2018) Testing deep neural networks, , arXiv:; Sun, Y., Wu, M., Ruan, W., Huang, X., Kwiatkowska, M., Kroening, D., (2018) Concolic testing for deep neural networks, , arXiv:; Tian, Y., Pei, K., Jana, S., Ray, B., Deeptest: automated testing of deep-neural-network-driven autonomous cars (2018) Proceedings of the 40th International Conference on Software Engineering, pp. 303-314. , ACM; Wang, J., Sun, J., Zhang, P., Wang, X., (2018) Detecting adversarial samples for deep neural networks through mutation testing, , arXiv:; Weyuker, E.J., On testing non-testable programs (1982) Comput. J., 25 (4), pp. 465-470; Xie, X., Ho, J.W., Murphy, C., Kaiser, G., Xu, B., Chen, T.Y., Testing and validating machine learning classifiers by metamorphic testing (2011) J. Syst. Softw., 84 (4), pp. 544-558; Xie, X., Ho, J.W., Murphy, C., Kaiser, G., Xu, B., Chen, T.Y., Testing and validating machine learning classifiers by metamorphic testing (2011) Journal of Systems and Software, 84 (4), pp. 544-558; Xie, X., Ma, L., Juefei-Xu, F., Chen, H., Xue, M., Li, B., Liu, Y., See, S., Coverage-guided fuzzing for deep neural networks (2018), 3. , arXiv:; Zafar, M.B., Valera, I., Gomez Rodriguez, M., Gummadi, K.P., Fairness beyond disparate treatment & disparate impact: learning classification without disparate mistreatment (2017) Proceedings of the 26th International Conference on World Wide Web, pp. 1171-1180. , International World Wide Web Conferences Steering Committee; Zhang, M., Zhang, Y., Zhang, L., Liu, C., Khurshid, S., (2018) Deeproad: gan-based metamorphic autonomous driving system testing, , arXiv:1802.02295; Zhang, Y., Chen, Y., Cheung, S.-C., Xiong, Y., Zhang, L., An empirical study on tensorflow program bugs (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 129-140. , ACM; Zhou, B., Sun, Y., Bau, D., Torralba, A., (2018) Revisiting the importance of individual units in cnns via ablation, , arXiv:","Braiek, H.B.; SWAT Lab., Polytechnique MontréalCanada; email: houssem.ben-braiek@polymtl.ca",,,Elsevier Inc.,,,,,01641212,,JSSOD,,English,J Syst Software,Article,Final,,Scopus,2-s2.0-85081030171
"Monemi Bidgoli A., Haghighi H.",57196402506;57189446914;,Augmenting ant colony optimization with adaptive random testing to cover prime paths,2020,Journal of Systems and Software,161,,110495,,,,,10.1016/j.jss.2019.110495,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076836482&doi=10.1016%2fj.jss.2019.110495&partnerID=40&md5=17f2295b34dedee10d310ddad27f574d,"Faculty of Computer Science and Engineering, Shahid Beheshti University G.C., Tehran, Iran","Monemi Bidgoli, A., Faculty of Computer Science and Engineering, Shahid Beheshti University G.C., Tehran, Iran; Haghighi, H., Faculty of Computer Science and Engineering, Shahid Beheshti University G.C., Tehran, Iran","Test data generation has a notable impact on the performance of software testing. A well-known approach to automate this activity is search-based test data generation. Most studies in this area use branch coverage as the test criterion. Since the prime path coverage criterion includes branch coverage, it has higher probability to detect software failures than the branch coverage criterion. This paper customizes and improves ant colony optimization (ACO) to provide a test data generation approach for covering prime paths. The proposed approach incorporates the notion of input space partitioning to maintain pheromone values in the search space. In addition, it employs the idea of adaptive random testing in the local search. At last, it uses the information of program predicates in order to make a relation between the logic of the program and pheromone values in the search space. The experimental results confirm the positive effects of the mentioned contributions, especially for programs with complex predicates. Furthermore, they represent that, on average, test suites generated by the proposed approach has 9% better mutation score in comparison to test suites produced by EvoSuite, a well-known test data generation tool. © 2019 Elsevier Inc.",Adaptive random testing; Ant colony optimization; Mutation analysis; Prime path coverage; Search-based test data generation,Ant colony optimization; Artificial intelligence; Clustering algorithms; Adaptive random testing; Ant Colony Optimization (ACO); Branch coverage criteria; Input space partitioning; Mutation analysis; Path coverage; Search-based test data generations; Test data generation; Software testing,,,,,,The authors would like to thank Dr. Andrea Arcuri for valuable advice regarding the way of doing the evaluation and extremely useful comments on the earlier drafts of this paper. We are also grateful to the authors of Durelli et al. (2018) to provide us the scripts to extract the prime paths of the program under test.,,"Ali, S., Briand, L.C., Hemmati, H., Panesar-Walawege, R.K., A systematic review of the application and empirical investigation of search-based test case generation (2010) IEEE Trans. Software Eng., 36 (6), pp. 742-762; Ammann, P., Offutt, J., Introduction to Software Testing (2016), Cambridge University Press; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., Mcminn, P., An orchestrated survey of methodologies for automated software test case generation (2013) J. Syst. Software, 86 (8), pp. 1978-2001; Andrews, J.H., Briand, L.C., Labiche, Y., Namin, A.S., Using mutation analysis for assessing and comparing testing coverage criteria (2006) IEEE Trans. Software Eng., 32 (8), pp. 608-624; Arcuri, A., It really does matter how you normalize the branch distance in search-based software testing (2013) Software Test. Verif. Reliab., 23 (2), pp. 119-147; Arcuri, A., Briand, L., A hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering (2014) Software Test. Verif. Reliab., 24 (3), pp. 219-250; Arcuri, A., Fraser, G., Parameter tuning or default values? an empirical investigation in search-based software engineering (2013) Empir. Software Eng., 18 (3), pp. 594-623; Barus, A.C., Chen, T.Y., Kuo, F.-C., Liu, H., Merkel, R., Rothermel, G., A cost-effective random testing method for programs with non-numeric inputs (2016) IEEE Trans. Comput., 65 (12), pp. 3509-3523; Bertolino, A., Software testing research: achievements, challenges, dreams (2007) 2007 Future of Software Engineering, pp. 85-103. , IEEE Computer Society; Bidgoli, A.M., Haghighi, H., Nasab, T.Z., Sabouri, H., Using swarm intelligence to generate test data for covering prime paths (2017) International Conference on Fundamentals of Software Engineering, pp. 132-147. , Springer; Blum, C., Li, X., Swarm intelligence in optimization (2008) Swarm Intelligence, pp. 43-85. , Springer; Bueno, P.M.S., Jino, M., Automatic test data generation for program paths using genetic algorithms (2002) Int. J. Software Eng. Knowl. Eng., 12 (6), pp. 691-709; Chen, T.Y., Kuo, F.-C., Towey, D., Zhou, Z.Q., A revisit of three studies related to random testing (2015) Sci. China Inf. Sci., 58 (5), pp. 1-9; Cohen, M.B., Colbourn, C.J., Ling, A.C., Augmenting simulated annealing to build interaction test suites (2003) Software Reliability Engineering, 2003. ISSRE 2003. 14th International Symposium on, pp. 394-405. , IEEE; Coles, H., Laurent, T., Henard, C., Papadakis, M., Ventresque, A., Pit: a practical mutation testing tool for java (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 449-452. , ACM; Dorigo, M., Birattari, M., Stutzle, T., Ant colony optimization (2006) IEEE Comput. Intell. Mag., 1 (4), pp. 28-39; Durelli, V.H., Delamaro, M.E., Offutt, J., An experimental comparison of edge, edge-pair, and prime path criteria (2018) Sci. Comput. Program., 152, pp. 99-115; Elbeltagi, E., Hegazy, T., Grierson, D., Comparison among five evolutionary-based optimization algorithms (2005) Adv. Eng. Inf., 19 (1), pp. 43-53; Floreano, D., Mattiussi, C., Bio-inspired artificial intelligence: Theories, methods, and technologies (2008), MIT press; Frankl, P.G., Weyuker, E.J., A formal analysis of the fault-detecting ability of testing methods (1993) IEEE Trans. Software Eng., 19 (3), pp. 202-213; Fraser, G., Arcuri, A., Whole test suite generation (2013) IEEE Trans. Software Eng., 39 (2), pp. 276-291; Fraser, G., Rojas, J.M., Campos, J., Arcuri, A., Evosuite at the sbst 2017 tool competition (2017) Proceedings of the 10th International Workshop on Search-Based Software Testing, pp. 39-41. , IEEE Press; Gupta, A., Jalote, P., An approach for experimentally evaluating effectiveness and efficiency of coverage criteria for software testing (2008) Int. J. Software Tools Technol. Trans., 10 (2), pp. 145-160; Hamlet, R.G., Testing programs with the aid of a compiler (1977) IEEE Trans. Software Eng., (4), pp. 279-290; Harman, M., McMinn, P., A theoretical and empirical study of search-based testing: local, global, and hybrid search (2010) IEEE Trans. Software Eng., 36 (2), pp. 226-247; Jones, B.F., Sthamer, H.-H., Eyres, D.E., Automatic structural testing using genetic algorithms (1996) Software Eng. J., 11 (5), pp. 299-306; Li, H., Lam, C.P., An ant colony optimization approach to test sequence generation for state based software testing (2005) Quality Software, 2005.(QSIC 2005). Fifth International Conference on, pp. 255-262. , IEEE; Li, K., Zhang, Z., Liu, W., Automatic test data generation based on ant colony optimization (2009) Natural Computation, 2009. ICNC'09. Fifth International Conference on, 6, pp. 216-220. , IEEE; Li, N., Praphamontripong, U., Offutt, J., An experimental comparison of four unit test criteria: Mutation, edge-pair, all-uses and prime path coverage (2009) Software Testing, Verification and Validation Workshops, 2009. ICSTW'09. International Conference on, pp. 220-229. , IEEE; Lin, J.-C., Yeh, P.-L., Automatic test data generation for path testing using gas (2001) Inf. Sci., 131 (1), pp. 47-64; Mao, C., Generating test data for software structural testing based on particle swarm optimization (2014) Arab. J. Sci. Eng., 39 (6), pp. 4593-4607; Mao, C., Harmony search-based test data generation for branch coverage in software structural testing (2014) Neural Comput. Appl., 25 (1), pp. 199-216; Mao, C., Xiao, L., Yu, X., Chen, J., Adapting ant colony optimization to generate test data for software structural testing (2015) Swarm Evol. Comput., 20, pp. 23-36; Offutt, A.J., Untch, R.H., Mutation 2000: Uniting the orthogonal (2001) Mutation testing for the new century, pp. 34-44. , Springer; Pargas, R.P., Harrold, M.J., Peck, R.R., Test-data generation using genetic algorithms (1999) Software Test. Verif. Reliab., 9 (4), pp. 263-282; Rojas, J.M., Campos, J., Vivanti, M., Fraser, G., Arcuri, A., Combining multiple coverage criteria in search-based unit test generation (2015) International Symposium on Search Based Software Engineering, pp. 93-108. , Springer; Sabor, K.K., Thiel, S., Adaptive random testing by static partitioning (2015) Proceedings of the 10th International Workshop on Automation of Software Test, pp. 28-32. , IEEE Press; Shamshiri, S., Rojas, J.M., Fraser, G., McMinn, P., Random or genetic algorithm search for object-oriented test suite generation? (2015) Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation, pp. 1367-1374. , ACM; Sharifipour, H., Shakeri, M., Haghighi, H., Structural test data generation using a memetic ant colony optimization based on evolution strategies (2018) Swarm Evol. Comput., 40, pp. 76-91; Simons, C., Smith, J., A comparison of evolutionary algorithms and ant colony optimization for interactive software design (2012) Proceedings of the 4 th Symposium on Search Based-Software Engineering, p. 37; Srivastava, P.R., Baby, K., Automated software testing using metahurestic technique based on an ant colony optimization (2010) Electronic System Design (ISED), 2010 International Symposium on, pp. 235-240. , IEEE; TEAM, R.C., R: a language and environment for statistical (2014) R Foundation for Statistical Computing, Viena, Austria, Vienna, Austria; Tracey, N., Clark, J., Mander, K., McDermid, J., An automated framework for structural test-data generation (1998) Automated Software Engineering, 1998. Proceedings. 13th IEEE International Conference on, pp. 285-288. , IEEE; Windisch, A., Wappler, S., Wegener, J., Applying particle swarm optimization to software testing (2007) Proceedings of the 9th Annual Conference on Genetic and Evolutionary Computation, pp. 1121-1128. , ACM","Haghighi, H.; Faculty of Computer Science and Engineering, Shahid Beheshti University G.C.Iran; email: h_haghighi@sbu.ac.ir",,,Elsevier Inc.,,,,,01641212,,JSSOD,,English,J Syst Software,Article,Final,,Scopus,2-s2.0-85076836482
"Flores M.A., Lazar I.M.",57215383906;7006566883;,XMAn v2-a database of Homo sapiens mutated peptides,2020,Bioinformatics,36,4,,1311,1313,,,10.1093/bioinformatics/btz693,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85080846165&doi=10.1093%2fbioinformatics%2fbtz693&partnerID=40&md5=237776edf94be9617e10a34b9018bb40,"Genomics Bioinformatics and Computational Biology, United States; Department of Biological Sciences, Virginia Tech, Blacksburg, VA  24061, United States","Flores, M.A., Genomics Bioinformatics and Computational Biology, United States; Lazar, I.M., Department of Biological Sciences, Virginia Tech, Blacksburg, VA  24061, United States","The 'Unknown Mutation Analysis (XMAn)' database is a compilation of Homo sapiens mutated peptides in FASTA format, that was constructed for facilitating the identification of protein sequence alterations by tandem mass spectrometry detection. The database comprises 2 539 031 non-redundant mutated entries from 17 599 proteins, of which 2 377 103 are missense and 161 928 are nonsense mutations. It can be used in conjunction with search engines that seek the identification of peptide amino acid sequences by matching experimental tandem mass spectrometry data to theoretical sequences from a database. © 2020 Oxford University Press. All rights reserved.",,amino acid sequence; article; bioinformatics; human; missense mutation; nonsense mutation; search engine; tandem mass spectrometry; theoretical study,,,,,"National Institute of General Medical Sciences, NIGMS: R01-GM121920",This work was supported by an award from the National Institute of General Medical Sciences (R01-GM121920) to IML.,,"Bamford, S., The COSMIC (Catalogue of Somatic Mutations in Cancer) database and website (2004) Br. J. Cancer, 91, pp. 355-358; Cao, R., DbSAP: Single amino-acid polymorphism database for protein variation detection (2017) Nucleic Acids Res., 45, pp. D827-D832; Ellrott, K., Scalable open science approach for mutation calling of tumor exomes using multiple genomic pipelines (2018) Cell Syst., 6, pp. 271-281; Forbes, S., COSMIC: High-resolution cancer genetics using the Catalogue of Somatic Mutations in Cancer (2017) Nucleic Acids Res., 45, pp. D777-D783; Ganesan, K.A., Kulandaisamy, A., HuVarBase: A human variant database with comprehensive information at gene and protein levels (2019) PLoS One, p. 0210475; Gholami, A.M., Global proteome analysis of the NCI-60 cell line panel (2013) Cell Rep., 4, pp. 609-620; Huang, P.J., CMPD: Cancer mutant proteome database (2015) Nucleic Acids Res, 43, pp. D849-D855; Li, X., Glutamine deamidation: Differentiation of Glutamic acid and c-Glutamic acid in peptides by electron capture dissociation (2010) Anal. Chem., 82, pp. 3606-3615; Lynch, M., The rate molecular spectrum, and consequences of human mutation (2010) Proc. Natl. Acad. Sci. USA, 107, pp. 961-968; Milholland, B., Differences between germline and somatic mutation rates in humans and mice (2017) Nat. Commun., 8, p. 15183; Nishimura, T., Nakamura, H., Developments for personalized medicine of lung cancer subtypes: Mass spectrometry-based clinical proteoge-nomic analysis of oncogenic mutations (2016) Adv. Exp. Med. Biol., 926, pp. 115-138; Stenson, P.D., The Human Gene Mutation Database: Towards a comprehensive repository of inherited mutation data for medical research genetic diagnosis and next-generation sequencing studies (2017) Hum. Genet., 136, pp. 665-677; UniProt: The universal protein knowledge-base (2017) Nucleic Acids Res., 45, pp. D158-D169. , The UniProt Consortium; Yang, X., Lazar, I.M., XMAn: A Homo sapiens mutated-peptide database for the MS analysis of cancerous cell states (2014) J. Proteome Res., 13, pp. 5486-5495","Lazar, I.M.; Department of Biological Sciences, Virginia TechUnited States; email: malazar@vt.edu",,,Oxford University Press,,,,,13674803,,BOINF,31539018,English,Bioinformatics,Article,Final,,Scopus,2-s2.0-85080846165
"Semeráth O., Farkas R., Bergmann G., Varró D.",55911741200;57209711983;25521116500;6602594778;,Diversity of graph models and graph generators in mutation testing,2020,International Journal on Software Tools for Technology Transfer,22,1,,57,78,,,10.1007/s10009-019-00530-6,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073960121&doi=10.1007%2fs10009-019-00530-6&partnerID=40&md5=eccbbce045e0fe7305a489553ce1eeb6,"MTA-BME Lendület Cyber-Physical Systems Research Group, Budapest, Hungary; Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Department of Electrical and Computer Engineering, McGill University, Montreal, Canada","Semeráth, O., MTA-BME Lendület Cyber-Physical Systems Research Group, Budapest, Hungary, Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Farkas, R., MTA-BME Lendület Cyber-Physical Systems Research Group, Budapest, Hungary, Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Bergmann, G., MTA-BME Lendület Cyber-Physical Systems Research Group, Budapest, Hungary, Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Varró, D., MTA-BME Lendület Cyber-Physical Systems Research Group, Budapest, Hungary, Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary, Department of Electrical and Computer Engineering, McGill University, Montreal, Canada","When custom modeling tools are used for designing complex safety-critical systems (e.g., critical cyber-physical systems), the tools themselves need to be validated by systematic testing to prevent tool-specific bugs reaching the system. Testing of such modeling tools relies upon an automatically generated set of models as a test suite. While many software testing practices recommend that this test suite should be diverse, model diversity has not been studied systematically for graph models. In the paper, we propose different diversity metrics for models by generalizing and exploiting neighborhood and predicate shapes as abstraction. We evaluate such shape-based diversity metrics using various distance functions in the context of mutation testing of graph constraints and access policies for two separate industrial DSLs. Furthermore, we evaluate the quality (i.e., bug detection capability) of different (random and consistent) model generation techniques for mutation testing purposes. © 2019, The Author(s).",Graph diversity metrics; Model diversity; Model generators; Mutation testing; Shape analysis,Automatic test pattern generation; Embedded systems; Graph theory; Program debugging; Quality control; Safety engineering; Safety testing; Automatically generated; Distance functions; Diversity metrics; Model generator; Mutation testing; Safety critical systems; Shape analysis; Systematic testing; Software testing,,,,,"Budapesti MÅ±szaki Ã©s GazdasÃ¡gtudomÃ¡nyi Egyetem, BME

Budapesti MÅ±szaki Ã©s GazdasÃ¡gtudomÃ¡nyi Egyetem, BME","Open access funding provided by Budapest University of Technology and Economics (BME). We would like to thank T?mea Balogh and Csaba Debreceni for providing us with their access control policy evaluator, to Aren Babikian, Boqi Chen, Chuning Li and Zolt?n Micskei for their detailed review of the paper, as well as the anonymous reviewers for their constructive criticism that contributed to a better explanation of our setting.",,"Al-Refai, M., Cazzolas, W.G., A fuzzy logic based approach for model-based regression test selection (2017) Models, pp. 55-62. , IEEE; Almendros-Jiménez, J.M., Becerra-Terón, A., Automatic generation of ecore models for testing ATL transformations (2016) MEDI, 9893, pp. 16-30. , LNCS, Springer; Aranega, V., Mottu, J., Etien, A., Degueule, T., Baudry, B., Dekeyser, J., Towards an automation of the mutation analysis dedicated to model transformation (2015) Softw. Test. Verif. Reliab., 25, pp. 653-683; Arkhangel’skii, A., Fedorchuk, V., (2012) General Topology I: Basic Concepts and Constructions Dimension Theory, 17. , Springer, Berlin; EMF Random Instantiator, , https://github.com/atlanmod/mondo-atlzoo-benchmark/tree/master/fr.inria.atlanmod.instantiator; Batot, E., Sahraoui, H.A., A generic framework for model-set selection for the unification of testing and learning MDE tasks (2016) Models, pp. 374-384. , ACM; Baudry, B., Monperrus, M., Mony, C., Chauvel, F., Fleurey, F., Clarke, S., Diversify: Ecology-inspired software evolution for diversity emergence (2014) CSMR-WCRE, pp. 395-398. , IEEE; Bergmann, G., Debreceni, C., Ráth, I., Varró, D., Query-based access control for secure collaborative modeling using bidirectional transformations (2016) Models, pp. 351-361. , ACM; Bertolino, A., Daoudagh, S., Kateb, D.E., Henard, C., Traon, Y.L., Lonetti, F., Marchetti, E., Papadakis, M., Similarity testing for access control (2015) Inf. Softw. Technol., 58, pp. 355-372; Bertolino, A., Daoudagh, S., Lonetti, F., Marchetti, E., XACMUT: XACML 2.0 mutants generator (2013) ICST Workshops, pp. 28-33. , IEEE; Bordbar, B., Anastasakis, K., UML2ALLOY: A tool for lightweight modelling of discrete event systems (2005) IADIS AC, pp. 209-216. , IADIS; Brottier, E., Fleurey, F., Steel, J., Baudry, B., Traon, Y.L., Metamodel-based test generation for model transformations: An algorithm and a tool (2006) ISSRE, pp. 85-94. , IEEE; Büttner, F., Egea, M., Cabot, J., Gogolla, M., Verification of ATL transformations using transformation models and model finders (2012) ICFEM, Volume 7635 of LNCS, pp. 198-213. , Springer; Cabot, J., Clarisó, R., Riera, D., UMLtoCSP: A tool for the formal verification of UML/OCL models using constraint programming (2007) ASE, pp. 547-548. , ACM; Cabot, J., Clarisó, R., Riera, D., Verification of UML/OCL class diagrams using constraint programming (2008) ICST Workshops, pp. 73-80. , IEEE; Darabos, A., Pataricza, A., Varró, D., Towards testing the implementation of graph transformations (2006) GTVMT, ENTCS, , Elsevier; de Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) TACAS 2008, 4963, pp. 337-340. , LNCS, Springer; Debreceni, C., Bergmann, G., Ráth, I., Varró, D., Enforcing fine-grained access control for secure collaborative modelling using bidirectional transformations (2017) Softw. Syst. Model., 18, pp. 1737-1769; Ehrig, K., Küster, J.M., Taentzer, G., Generating instance models from meta models (2009) Softw. Syst. Model., 8 (4), pp. 479-500; Fleurey, F., Baudry, B., Muller, P., Le Traon, Y., Towards dependable model transformations: qualifying input test data (2007) Softw. Syst. Model., 8, pp. 185-203; Godik, S.T.M., (2003) Extensible Access Control Markup Language (XACML) Version, (2), p. 1; Gogolla, M., Vallecillo, A., Burgueño, L., Hilken, F., Employing classifying terms for testing model transformations (2015) Models, pp. 312-321. , IEEE; Gómez, A., Mendialdua, X., Bergmann, G., Cabot, J., Debreceni, C., Garmendia, A., Kolovos, D.S., Trujillo, S., On the opportunities of scalable modeling technologies: An experience report on wind turbines control applications development (2017) ECMFA, Volume 10376 of LNCS, pp. 300-315. , Springer; González, C.A., Cabot, J., Test data generation for model transformations combining partition and constraint analysis (2014) ICMT, Volume 8568 of LNCS, pp. 25-41. , Springer; Guerra, E., Soeken, M., Specification-driven model transformation testing (2015) Softw. Syst. Model., 14 (2), pp. 623-644; Hilken, F., Gogolla, M., Burgueño, L., Vallecillo, A., Testing models and model transformations using classifying terms (2018) Softw. Syst. Model., 17, pp. 885-912; Hu, C.T., Kuhn, D.R., Yaga, D.J., (2017) Verification and Test Methods for Access Control Policies/Models, , Special Publication (NIST SP) 800-192, National Institute of Standards and Technology; Iyengar, S.S., (2005) Metadata Driven System for Effecting Extensible Data Interchange Based on Universal Modeling Language UML, Meta Object Facility MOF and Extensible Markup Language XML Standards; Jackson, D., Alloy: a lightweight object modelling notation (2002) ACM Trans. Softw. Eng. Methodol., 2, pp. 256-290; Jackson, E.K., Levendovszky, T., Balasubramanian, D., Reasoning about metamodeling with formal specifications and automatic proofs (2011) Models, Volume 6981 of LNCS, pp. 653-667. , Springer; Jackson, E.K., Simko, G., Sztipanovits, J., Diversely enumerating system-level architectures (2013) EMSOFT, pp. 1-11. , IEEE; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678; Kang, E., Jackson, E., Schulte, W., An approach for effective design space exploration (2010) Monterey Workshop, Volume 6662 of LNCS, pp. 33-54. , Springer; Le Berre, D., Parrain, A., The sat4j library, release 2.2 (2010) J. Satisf. Boolean Model. Comput., 7, pp. 59-64; Martin, E., Xie, T., A fault model and mutation testing of access control policies (2007) WWW, pp. 667-676. , ACM; Micskei, Z., Szatmári, Z., Oláh, J., Majzik, I., A concept for testing robustness and safety of the context-aware behaviour of autonomous systems (2012) KES-AMSTA, Volume 7327 of LNCS, pp. 504-513. , Springer; Mottu, J., Baudry, B., Traon, Y.L., Mutation analysis testing for model transformations (2006) ECMDA-FA, Volume 4066 of LNCS, pp. 376-390. , Springer; Mottu, J., Sen, S., Cadavid, J.J., Baudry, B., Discovering model transformation pre-conditions using automatically generated test models (2015) ISSRE, pp. 88-99. , IEEE; (2006) Object Constraint Language, , v2.0; Ratiu, D., Voelter, M., Automated testing of DSL implementations: Experiences from building mbeddr (2016) AST@ICSE, pp. 15-21. , ACM; Reid, S., An empirical analysis of equivalence partitioning, boundary value analysis and random testing (1997) IEEE METRICS, pp. 64-73. , IEEE; Rensink, A., Isomorphism checking in GROOVE (2006) Electron. Commun. Eur. Assoc. Softw. Sci. Technol., , https://doi.org/10.14279/tuj.eceasst.1.77.84; Rensink, A., Distefano, D., Abstract graph transformation (2006) Electron. Notes Theor. Comput. Sci., 157, pp. 39-59; Reps, T.W., Sagiv, S., Wilhelm, R., Static program analysis via 3-valued logic (2004) CAV, Volume 3114 of LNCS, pp. 15-30. , Springer; Scheidgen, M., Generation of large random models for benchmarking (2015) Bigmde@Staf, Volume 1406 of CEUR Workshop Proceedings, pp. 1-10. , CEUR-WS.org; Schönböck, J., Kappel, G., Wimmer, M., Kusel, A., Retschitzegger, W., Schwinger, W., TETRABox—a generic white-box testing framework for model transformations (2013) APSEC, pp. 75-82. , IEEE; Semeráth, O., Barta, Á., Horváth, Á., Szatmári, Z., Varró, D., Formal validation of domain-specific languages with derived features and well-formedness constraints (2017) Softw. Syst. Model., 16, pp. 357-392; Semeráth, O., Nagy, A.S., Varró, D., A graph solver for the automated generation of consistent domain-specific models (2018) ICSE, pp. 969-980. , ACM; Semeráth, O., Varró, D., Graph constraint evaluation over partial models by constraint rewriting (2017) ICMT, Volume 10374 of LNCS, pp. 138-154. , Springer; Semeráth, O., Varró, D., Iterative generation of diverse models for testing specifications of DSL tools (2018) FASE, 10802, pp. 227-245. , LNCS, Springer; Semeráth, O., Vörös, A., Varró, D., Iterative and incremental model generation by logic solvers (2016) FASE, Volume 9633 of LNCS, pp. 87-103. , Springer; Sen, S., Baudry, B., Mottu, J., Automatic model generation strategies for model transformation testing (2009) ICMT, Volume 5563 of LNCS, pp. 148-164. , Springer; . Eclipse Modeling Framework, , www.eclipse.org/emf, The Eclipse Project; The Eclipse Project. EMF Diffmerge, , http://wiki.eclipse.org/EMF_DiffMerge; The Eclipse Project. MDT Papyrus, , http://www.eclipse.org/modeling/mdt/papyrus/; Torlak, E., Jackson, D., Kodkod: A relational model finder (2007) TACAS, Volume 4424 of LNCS, pp. 632-647. , Springer; Torrini, P., Heckel, R., Ráth, I., Stochastic simulation of graph transformation systems (2010) FASE, Volume 6013 of LNCS, pp. 154-157. , Springer; Ujhelyi, Z., Bergmann, G., Hegedüs, Á., Horváth, Á., Izsó, B., Ráth, I., Szatmári, Z., Varró, D., EMF-IncQuery: an integrated development environment for live model queries (2015) Sci. Comput. Program., 98, pp. 80-99; Vallecillo, A., Gogolla, M., Burgueño, L., Wimmer, M., Hamann, L., Formal specification and testing of model transformations (2012) SFM, Volume 7320 of LNCS, pp. 399-437. , Springer; Varró, D., Balogh, A., The model transformation language of the VIATRA2 framework (2007) Sci. Comput. Program., 68, pp. 214-234; Varró, D., Semeráth, O., Szárnyas, G., Horváth, Á., Towards the automated generation of consistent, diverse, scalable and realistic graph models (2018) Graph Transformation, Specifications, and Nets, Volume 10800 of LNCS, pp. 285-312. , Springer; Wang, J., Kim, S., Carrington, D.A., Verifying metamodel coverage of model transformations (2006) ASWEC, pp. 270-282. , IEEE; http://statecharts.org/, Yakindu","Semeráth, O.; MTA-BME Lendület Cyber-Physical Systems Research GroupHungary; email: semerath@mit.bme.hu",,,Springer,,,,,14332779,,,,English,Int. J. Softw. Tools Technol. Trans.,Article,Final,Open Access,Scopus,2-s2.0-85073960121
"Peng Z., Xiao X., Hu G., Kumar Sangaiah A., Atiquzzaman M., Xia S.",57209881023;8923881500;55460999500;55616335800;7005257888;7202892509;,ABFL: An autoencoder based practical approach for software fault localization,2020,Information Sciences,510,,,108,121,,,10.1016/j.ins.2019.08.077,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072272015&doi=10.1016%2fj.ins.2019.08.077&partnerID=40&md5=108a78a02260ecd84127b978ba9a3cea,"Tsinghua Shenzhen International Graduate School, Tsinghua University, Shenzhen, China; Peng Cheng Laboratory, Shenzhen, China; School of Computer Science, Shenzhen Institute of Information Technology, Shenzhen, China; School of Computing Science and Engineering, Vellore Institute of Technology (VIT), Vellore, 632014, India; School of Computer Science, University of Oklahoma, Norman, OK  73019, United States","Peng, Z., Tsinghua Shenzhen International Graduate School, Tsinghua University, Shenzhen, China, Peng Cheng Laboratory, Shenzhen, China; Xiao, X., Tsinghua Shenzhen International Graduate School, Tsinghua University, Shenzhen, China, Peng Cheng Laboratory, Shenzhen, China; Hu, G., School of Computer Science, Shenzhen Institute of Information Technology, Shenzhen, China; Kumar Sangaiah, A., School of Computing Science and Engineering, Vellore Institute of Technology (VIT), Vellore, 632014, India; Atiquzzaman, M., School of Computer Science, University of Oklahoma, Norman, OK  73019, United States; Xia, S., Tsinghua Shenzhen International Graduate School, Tsinghua University, Shenzhen, China, Peng Cheng Laboratory, Shenzhen, China","Fault localization is essential to software debugging. Despite existing techniques, such as mutation analysis, development history and bug reports, have made great contributions to fault localization, the challenge of infeasibility still exits in practice due to expense of mutation analysis, lacking of development history and bug reports. To improve accuracy and feasibility in fault code locating, in this paper, we propose ABFL, an Autoencoder Based practical approach for Fault Localization. ABFL first introduces an autoencoder to extract 32 features from software static source code. Then it employs Spectrum Based Fault Localization (SBFL) techniques to calculate 14 types of scores, which are taken as another group of features in software running time. Finally, relying on the constructed ranking model, ABFL integrates two groups of features together and precisely locates faulty statements in code. The executed extensive experiments on the Defects4J repository show that our approach is superior to the state-of-the-art SBFL techniques, ranking the faulty statement at the 1st, 3rd, and 5th positions with 49, 94, and 123 faults, respectively. © 2019",Autoencoder; Debugging; Fault localization; SBFL,Codes (symbols); Computer debugging; Learning systems; Software testing; Auto encoders; Development history; Fault localization; Mutation analysis; SBFL; Software debugging; Software fault localization; State of the art; Program debugging,,,,,"National Basic Research Program of China (973 Program): 2018YFB1800204

JCYJ20170817115335418, PCL2018KP001, JCYJ20180508152204044

Natural Science Foundation of Guangdong Province: 2018A030313422

National Natural Science Foundation of China, NSFC: 61972219, 61771273","This work is supported in part by the Natural Science Foundation of Guangdong Province ( 2018A030313422 ), the National Key Research and Development Program of China ( 2018YFB1800204 ), the National Natural Science Foundation of China ( 61972219 , 61771273 ), the R&D Program of Shenzhen (JCYJ20180508152204044, JCYJ20170817115335418), and the research fund of PCL Future Regional Network Facilities for Large-scale Experiments and Applications (PCL2018KP001).",,"Abreu, R., Zoeteweij, P., Gemund, A.J.C.V., Spectrum-based multiple fault localization (2009) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, ASE ’09, pp. 88-99. , IEEE Computer Society Washington, DC, USA ISBN, doi:; Abreu, R., Zoeteweij, P., Golsteijn, R., van Gemund, A.J., A practical evaluation of spectrum-based fault localization (2009) J. Syst. Softw., 82 (11), pp. 1780-1792. , ISSN. doi:; Le, T.-D.B., Lo, D., Le Goues, C., Grunske, L., A learning-to-rank based fault localization approach using likely invariants (2016) Proceedings of the Twenty-Fifth International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 177-188. , ACM New York, NY, USA ISBN, doi:; Chakraborty, S., Li, Y., Irvine, M., Saha, R., Ray, B., (2018) Entropy guided spectrum based bug localization using statistical language model, , arXiv:; Chekam, T.T., Papadakis, M., Traon, Y.L., (2016) Assessing and comparing mutation-based fault localization techniques, , arXiv:; Chen, M.Y., Kiciman, E., Fratkin, E., Fox, A., Brewer, E., Pinpoint: problem determination in large, dynamic internet services (2002) Proceedings of the International Conference on Dependable Systems and Networks, pp. 595-604; Joachims, T., Training linear SVMS in linear time (2006) Proceedings of the Twelfth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD ’06, pp. 217-226. , ACM New York, NY, USA ISBN, doi:; Jones, J.A., Harrold, M.J., Empirical evaluation of the tarantula automatic fault-localization technique (2005) Proceedings of the Twentieth IEEE/ACM International Conference on Automated Software Engineering, ASE ’05, pp. 273-282. , ACM New York, NY, USA ISBN, doi:; Just, R., Jalali, D., Ernst, M.D., Defects4J: a database of existing faults to enable controlled testing studies for java programs (2014) Proceedings of the International Symposium on Software Testing and Analysis, ISSTA 2014, pp. 437-440. , ACM New York, NY, USA ISBN, doi:; Lam, A.N., Nguyen, A.T., Nguyen, H.A., Nguyen, T.N., Bug localization with combination of deep learning and information retrieval (2017) Proceedings of the IEEE/ACM Twenty-Fifth International Conference on Program Comprehension (ICPC), pp. 218-229; Li, X., Zhang, L., Transforming programs and tests in tandem for fault localization (2017) Proc. ACM Program. Lang., 1 (OOPSLA), pp. 921-92:30. , ISSN, doi:; Lucia, L., Lo, D., Jiang, L., Thung, F., Budi, A., Extended comprehensive study of association measures for fault localization (2014) J. Softw. Evol. Process, 26 (2), pp. 172-219; Ma, C., Nie, C., Chao, W., Zhang, B., A vector table model-based systematic analysis of spectral fault localization techniques (2019) Softw. Qual. J., 27 (1), pp. 43-78. , ISSN, doi:; Moon, S., Kim, Y., Kim, M., Yoo, S., Ask the mutants: mutating faulty programs for fault localization (2014) Proceedings of the IEEE Seventh International Conference on Software Testing, Verification and Validation, pp. 153-162. , ISSN, doi:; Neelofar, N., Naish, L., Lee, J., Ramamohanarao, K., Improving spectral-based fault localization using static analysis (2017) Softw. Pract. Exp., 47 (11), pp. 1633-1655; Papadakis, M., Le Traon, Y., Metallaxis-FL: mutation-based fault localization (2015) Softw. Test. Verif. Reliab., 25 (5-7), pp. 605-628; Pearson, S., Campos, J., Just, R., Fraser, G., Abreu, R., Ernst, M.D., Pang, D., Keller, B., Evaluating and improving fault localization (2017) Proceedings of the Thirty-Ninth International Conference on Software Engineering, ICSE ’17, pp. 609-620. , IEEE Press Piscataway, NJ, USA ISBN, doi:; Ray, B., Hellendoorn, V., Godhane, S., Tu, Z., Bacchelli, A., Devanbu, P., On the “naturalness” of buggy code (2016) Proceedings of the IEEE/ACM Thirty-Eighth International Conference on Software Engineering (ICSE), pp. 428-439. , ISSN, doi:; Sangaiah, A.K., Medhane, D.V., Han, T., Hossain, M.S., Muhammad, G., Enforcing position-based confidentiality with machine learning paradigm through mobile edge computing in real-time industrial informatics (2019) IEEE Trans. Ind. Inform., p. 1-1. , ISSN, doi:; Sh. Ghandehari, L., Lei, Y., Kacker, R., Kuhn, D.R.R., Kung, D., Xie, T., A combinatorial testing-based approach to fault localization (2018) IEEE Trans. Softw. Eng., p. 1-1. , ISSN,; Sohn, J., Yoo, S., Fluccs: using code and change metrics to improve fault localization (2017) Proceedings of the Twenty-Sixth ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2017, pp. 273-283. , ACM New York, NY, USA ISBN, doi:; Wang, S., Chollak, D., Movshovitz-Attias, D., Tan, L., Bugram: Bug detection with n-gram language models (2016) Proceedings of the Thirty-First IEEE/ACM International Conference on Automated Software Engineering, ASE 2016, pp. 708-719. , ACM New York, NY, USA ISBN, doi:; Wong, W.E., Debroy, V., Gao, R., Li, Y., The DStar method for effective software fault localization (2014) IEEE Trans. Reliab., 63 (1), pp. 290-308. , ISSN, doi:; Wong, W.E., Gao, R., Li, Y., Abreu, R., Wotawa, F., A survey on software fault localization (2016) IEEE Trans. Softw. Eng., 42 (8), pp. 707-740. , ISSN, doi:; Xie, X., Chen, T.Y., Kuo, F.-C., Xu, B., A theoretical analysis of the risk evaluation formulas for spectrum-based fault localization (2013) ACM Trans. Softw. Eng. Methodol., 22 (4), pp. 311-31:40. , ISSN, doi:; Yoo, S., Evolving human competitive spectra-based fault localisation techniques (2012) Search Based Software Engineering, pp. 244-258. , G. Fraser J. Teixeira de Souza Springer Berlin Heidelberg Berlin, Heidelberg; Youm, K.C., Ahn, J., Lee, E., Improved bug localization based on code change histories and bug reports (2017) Inf. Softw. Technol., 82, pp. 177-192. , ISSN, doi:; Zhang, M., Li, Y., Li, X., Chen, L., Zhang, Y., Zhang, L., Khurshid, S., An empirical study of boosting spectrum-based fault localization via pagerank (2019) IEEE Trans. Softw. Eng., p. 1-1. , ISSN, doi:; Zhou, J., Zhang, H., Lo, D., Where should the bugs be fixed? More accurate information retrieval-based bug localization based on bug reports (2012) Proceedings of the Thirty-Fourth International Conference on Software Engineering (ICSE), pp. 14-24. , ISSN,; Zou, D., Liang, J., Xiong, Y., Ernst, M.D., Zhang, L., An empirical study of fault localization families and their combinations (2019) IEEE Transactions on Software Engineering, p. 1-1. , ISSN, doi:","Hu, G.; School of Computer Science, Shenzhen Institute of Information TechnologyChina; email: hugw@sziit.edu.cn",,,Elsevier Inc.,,,,,00200255,,ISIJB,,English,Inf Sci,Article,Final,,Scopus,2-s2.0-85072272015
"Nguyen Q.-V., Truong H.-B.",56878280700;36651983500;,An Improvement of Applying Multi-objective Optimization Algorithm into Higher Order Mutation Testing,2020,Advances in Intelligent Systems and Computing,1121 AISC,,,361,369,,,10.1007/978-3-030-38364-0_32,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077497830&doi=10.1007%2f978-3-030-38364-0_32&partnerID=40&md5=4569aaa7bec373761dc74dd42a37689b,"Korea-Vietnam Friendship Information Technology College, Quangnam, Viet Nam; Faculty of Computer Science, University of Information Technology, Vietnam National University Ho Chi Minh City (VNU-HCM), Ho Chi Minh City, Viet Nam","Nguyen, Q.-V., Korea-Vietnam Friendship Information Technology College, Quangnam, Viet Nam; Truong, H.-B., Faculty of Computer Science, University of Information Technology, Vietnam National University Ho Chi Minh City (VNU-HCM), Ho Chi Minh City, Viet Nam","In order to raise the quality of higher order mutation testing, in this paper, we propose an approach for effect improving of multi-objective optimization algorithms which can be used in the field of higher order mutation testing in order to reduce the number of generated mutant, generate the hard-to-kill mutant and construct the quality higher order mutants. We have performed an empirical evaluation with 20 real-word, open-source projects and 10 multi-objective optimization algorithms (including 5 original algorithms and 5 corresponding modification algorithms) to evaluate experimental results as well as bring out some opinions to effectiveness apply multi-objective optimization algorithms into higher order mutation testing. The study results indicate that our approach is an effectiveness one to get better the quality of higher order mutation testing. © Springer Nature Switzerland AG 2020.",Higher order mutation testing; Multi-objective optimization algorithms; Mutant reduction; Mutation testing; Quality mutants; Quality of higher order mutation testing,Genetic algorithms; Petroleum reservoir evaluation; Software testing; Well testing; Empirical evaluations; Higher-order; Mutation testing; Open source projects; Original algorithms; Multiobjective optimization,,,,,"Viet Nam National University Ho Chi Minh City, VNU-HCM: C2018-26-09",Acknowledgement. This paper is funded by Vietnam National University Ho Chi Minh City (VNU-HCM) under grant number C2018-26-09.,,"Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) IEEE Comput, 11 (4), pp. 34-41; Hamlet, R.G., Testing programs with the aid of a compiler (1977) IEEE Trans. Softw. Eng., SE-3 (4), pp. 279-290; Nguyen, Q.V., Madeyski, L., Problems of mutation testing and higher order mutation testing (2014) ICCSAMA 2014, Advanced Computational Methods for Knowledge Engineering. Advances in Intelligent Systems and Computing, 282, pp. 157-172. , https://doi.org/10.1007/978-3-319-06569-4_12, Do, T., Le Thi, H.A., Nguyen, N.T. (eds.), Springer; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678; Jia, Y., Harman, M., Higher order mutation testing (2009) Inf. Softw. Technol., 51, pp. 1379-1393; Harman, M., Jia, Y., Langdon, W.B., A manifesto for higher order mutation testing (2010) Third International Conference on Software Testing, Verification, and Validation Workshops; Offutt, A.J., Investigations of the software testing coupling effect (1992) ACM Trans. Softw. Eng. Methodol., 1, pp. 5-20; Polo, M., Piattini, M., Garcia-Rodriguez, I., Decreasing the cost of mutation testing with second-order mutants (2008) Softw. Test. Verif. Reliab., 19 (2), pp. 111-131; Madeyski, L., Orzeszyna, W., Torkar, R., Józala, M., Overcoming the equivalent mutant problem: A systematic literature review and a comparative experiment of second order mutation (2014) IEEE Trans. Softw. Eng., 40 (1), pp. 23-42. , https://doi.org/10.1109/TSE.2013.44; Jia, Y., Harman, M., Constructing subtle faults using higher order mutation testing (2008) Proceedings of Eighth International Working Conference on Source Code Analysis and Manipulation; Omar, E., Ghosh, S., Whitley, D., Constructing subtle higher order mutants for Java and AspectJ programs (2013) International Symposium on Software Reliability Engineering, pp. 340-349; Omar, E., Ghosh, S., Whitley, D., Comparing search techniques for fnding subtle higher order mutants (2014) Proceedings of the 2014 Annual Conference on Genetic and Evolutionary Computation, pp. 1271-1278; Fevzi Belli, F., Guler, N., Hollmann, A., Suna, E., Yildiz, E., Model based higher-order mutation analysis (2010) In: Advances in Software Engineering. Communications in Computer and Information Science, 117, pp. 164-173; Akinde, A.O., Using higher order mutation for reducing equivalent mutants in mutation testing (2012) Asian J. Comput. Sci. Inf. Technol., 2 (3), pp. 13-18; Langdon, W.B., Harman, M., Jia, Y., Multi-objective higher order mutation testing with genetic programming (2009) Proceedings Fourth Testing: Academic and Industrial Conference Practice and Research; Langdon, W.B., Harman, M., Jia, Y., Efficient multi-objective higher order mutation testing with genetic programming (2010) J. Syst. Softw., 83, pp. 2416-2430; Nguyen, Q.V., Madeyski, L., Searching for strongly subsuming higher order mutants by applying multi-objective optimization algorithm (2015) Advanced Computational Methods for Knowledge Engineering. Advances in Intelligent Systems and Computing, 358, pp. 391-402. , https://doi.org/10.1007/978-3-319-17996-4_35, Le Thi, H.A., Nguyen, N.T., Do, T.V. (eds.), Springer, Cham; Nguyen, Q.V., Madeyski, L., Empirical evaluation of multi-objective optimization algorithms searching for higher order mutants (2016) Cybern. Syst. Int. J., 47, pp. 48-68; Nguyen, Q.V., Madeyski, L., Higher order mutation testing to drive development of new test cases: An empirical comparison of three strategies (2016) Lecture Notes in Computer Science; Nguyen, Q.V., Madeyski, L., On the relationship between the order of mutation testing and the properties of generated higher order mutants (2016) Lecture Notes in Computer Science; Nguyen, Q.V., Madeyski, L., Addressing mutation testing problems by applying multi-objective optimization algorithms and higher order mutation (2017) J. Intell. Fuzzy Syst., 32, pp. 1173-1182. , https://doi.org/10.3233/JIFS-169117; Nguyen, Q.V., Pham, D.T.H., Is higher order mutant harder to kill than first order mutant? An experimental study. Lecture Notes in Computer Science, vol. 10751 (2018) Springer, , https://doi.org/10.1007/978-3-319-75417-8_62; Madeyski, L., Radyk, N., Judy-a mutation testing tool for Java (2010) IET Softw, 4 (1), pp. 32-42. , https://doi.org/10.1049/iet-sen.2008.0038; Deb, K., Pratap, A., Agarwal, S., Meyarivan, T., A fast and elitist multi objective genetic algorithm: NSGA-II (2002) IEEE Trans. Evol. Comput., 6 (2), pp. 182-197; Deb, K., Jain, H., An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, Part I: Solving problems with box constraints (2014) IEEE Trans. Evol. Comput., 18 (4), pp. 577-601; Kollat, J.B., Reed, P.M., The value of online adaptive search: A performance comparison of NSGAII, ε-NSGAII and ε-MOEA (2005) Third International Conference on Evolutionary Multi-Criterion Optimization, EMO 2005, Guanajuato, , Coello, C.A.C., Aguirre, A.H., Zitzler, E. (eds.), Mexico, 9–11 March 2005; Deb, K., Mohan, M., Mishra, S., (2003) A Fast Multi-Objective Evolutionary Algorithm for Finding Well-Spread Pareto-Optimal Solutions. Kengal, , Report No. 2003002. Indian Institute of Technology, Kanpur, India; Zitzler, E., Laumanns, M., Thiele, L., SPEA2: Improving the strength Pareto evolutionary algorithm for multi-objective optimization (2002) Evolutionary Methods for Design, Optimisations and Control, pp. 19-26. , Giannakoglou, K., Tsahalis, D., Periaux, J., Papailiou. K., Fogarty, T. (eds.); McConnell, S., (2004) Code Complete, , 2nd edn. Microsoft Press, Redmond","Nguyen, Q.-V.; Korea-Vietnam Friendship Information Technology CollegeViet Nam; email: vunq@viethanit.edu.vn",Le Thi H.A.Le H.M.Pham Dinh T.Nguyen N.T.,,Springer,"6th International Conference on Computer Science, Applied Mathematics and Applications, ICCSAMA 2019",19 December 2019 through 20 December 2019,,235329,21945357,9783030383633,,,English,Adv. Intell. Sys. Comput.,Conference Paper,Final,,Scopus,2-s2.0-85077497830
Lee J.Y.,50262320700;,Game Theoretic Framework to Mutation Testing,2020,Advances in Intelligent Systems and Computing,925,,,159,164,,,10.1007/978-3-030-14687-0_14,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064154279&doi=10.1007%2f978-3-030-14687-0_14&partnerID=40&md5=a4690bca5fabced5060773a17c91f7f6,"Innopolis University, Innopolis, Russian Federation","Lee, J.Y., Innopolis University, Innopolis, Russian Federation","Mutation testing is an intuitive approach to test errors in software as well as to measure the quality of test suites. Due to its prohibitively high computation cost for generating all mutants, different approaches have been proposed to alleviate the cost. In this paper, first we introduce such efforts and then propose a new framework, mutation game. We formulate a game between Tester who wants to kill mutants and Demon who supports living mutants. We also propose strategies and an algorithm for the repeated game. © 2020, Springer Nature Switzerland AG.",Game theory; Mutation testing; Software testing,Application programs; Computation theory; Game theory; Computation costs; Game-theoretic; Mutation testing; Repeated games; Test errors; Software testing,,,,,,,,"Acree, A.T., Budd, T.A., Demillo, R.A., Lipton, R.J., Sayward, F.G., (1979); Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) Computer, 11 (4), pp. 34-41; Johansson, E., (2016) Evaluating the Effectiveness of Test Coverage Criteria Using Mutation Analysis: An Evaluation of Test Coverage Criteria in C; Kochhar, P.S., Thung, F., Lo, D., Code coverage and test suite effectiveness: Empirical study with real bugs in large systems (2015) 2015 IEEE 22Nd International Conference on Software Analysis, Evolution, and Reengineering (SANER), pp. 560-564. , https://doi.org/10.1109/SANER.2015.7081877; Lee, J., Oh, J.C., Convergence of true cooperations in Bayesian reputation game (2014) 2014 IEEE 13Th International Conference on Trust, Security and Privacy in Computing and Communications, pp. 487-494. , https://doi.org/10.1109/TrustCom.2014.61, September; Mathur, A.P., Performance, effectiveness, and reliability issues in software testing (1991) Proceedings the Fifteenth Annual International Computer Software Applications Conference, pp. 604-605. , https://doi.org/10.1109/CMPSAC.1991.170248; Offutt, A.J., Rothermel, G., Zapf, C., An experimental evaluation of selective mutation (1993) Proceedings of the 15Th International Conference on Software Engineering, Baltimore, Maryland, USA, pp. 100-107. , http://portal.acm.org/citation.cfm?id=257572.257597; Petrovic, G., Ivankovic, M., State of mutation testing at Google (2018) Proceedings of the 40Th International Conference on Software Engineering 2017 (SEIP); Wong, W.E., Horgan, J.R., London, S., Mathur, A.P., Effect of test set minimization on fault detection effectiveness (1995) Proceedings of the 17Th International Conference on Software Engineering, pp. 41-50. , https://doi.org/10.1145/225014.225018","Lee, J.Y.; Innopolis UniversityRussian Federation; email: j.lee@innopolis.ru",Mazzara M.Messina A.Sillitti A.Succi G.Ciancarini P.,,Springer Verlag,"6th International Conference in Software Engineering for Defence Applications, SEDA 2018",7 June 2018 through 8 June 2018,,224619,21945357,9783030146863,,,English,Adv. Intell. Sys. Comput.,Conference Paper,Final,,Scopus,2-s2.0-85064154279
"Delgado-Pérez P., Sánchez A.B., Segura S., Medina-Bulo I.",57203165328;7401886758;25629936300;22433447400;,Performance mutation testing,2020,Software Testing Verification and Reliability,,,e1728,,,,,10.1002/stvr.1728,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078796787&doi=10.1002%2fstvr.1728&partnerID=40&md5=ea0644dd3d50c6d913f25f2b02d5c94a,"Escuela Superior de Ingeniería, Universidad de Cádiz, Cádiz, Spain; ETS Ingeniería Informática, Universidad de Sevilla, Seville, Spain","Delgado-Pérez, P., Escuela Superior de Ingeniería, Universidad de Cádiz, Cádiz, Spain; Sánchez, A.B., ETS Ingeniería Informática, Universidad de Sevilla, Seville, Spain; Segura, S., ETS Ingeniería Informática, Universidad de Sevilla, Seville, Spain; Medina-Bulo, I., Escuela Superior de Ingeniería, Universidad de Cádiz, Cádiz, Spain","Performance bugs are known to be a major threat to the success of software products. Performance tests aim to detect performance bugs by executing the program through test cases and checking whether it exhibits a noticeable performance degradation. The principles of mutation testing, a well-established testing technique for the assessment of test suites through the injection of artificial faults, could be exploited to evaluate and improve the detection power of performance tests. However, the application of mutation testing to assess performance tests, henceforth called performance mutation testing (PMT), is a novel research topic with numerous open challenges. In previous papers, we identified some key challenges related to PMT. In this work, we go a step further and explore the feasibility of applying PMT at the source-code level in general-purpose languages. To do so, we revisit concepts associated with classical mutation testing and design seven novel mutation operators to model known bug-inducing patterns. As a proof of concept, we applied traditional mutation operators as well as performance mutation operators to open-source C++ programs. The results reveal the potential of the new performance-mutants to help assess and enhance performance tests when compared with traditional mutants. A review of live mutants in these programs suggests that they can induce the design of special test inputs. In addition to these promising results, our work brings a whole new set of challenges related to PMT, which will hopefully serve as a starting point for new contributions in the area. Copyright © 2020 John Wiley & Sons, Ltd.",mutation testing; performance bugs; performance testing; software testing,C++ (programming language); Open source software; Program debugging; Well testing; General purpose languages; Mutation operators; Mutation testing; Performance bugs; Performance degradation; Performance testing; Performance tests; Testing technique; Software testing,,,,,"RTI2018‐093608‐B‐C33

RTI2018‐101204‐B‐C21, US‐1264651, TIN2015‐70560‐R

European Commission, EC

Ministerio de EconomÃ­a y Competitividad, MINECO: TIN2015‐65845‐C3‐3‐R

European Regional Development Fund, FEDER","This work has been partially supported by the European Commission (FEDER), Spanish Government under MINECO projects DArDOS (TIN2015‐65845‐C3‐3‐R), FAME (RTI2018‐093608‐B‐C33), BELI (TIN2015‐70560‐R) and HORATIO (RTI2018‐101204‐B‐C21) and the Operational Programme Andalusia under project APOLO (US‐1264651).",,"Xu, G., Arnold, M., Mitchell, N., Rountev, A., Sevitsky, G., (2009) Go with the flow: profiling copies to find runtime bloat, pp. 419-430. , http://doi.org/10.1145/1542476.1542523, Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation,, ACM, New York, NY, USA; Liu, Y., Xu, C., Cheung, S.-C., Lu, J., Greendroid: automated diagnosis of energy inefficiency for smartphone applications (2014) IEEE Transactions on Software Engineering, 1, p. 1; Nistor, A., Jiang, T., Tan, L., (2013) Discovering, reporting, and fixing performance bugs, pp. 237-246. , Working Conference on Mining Software Repositories. IEEE; Zaman, S., Adams, B., Hassan, A.E., (2012) A qualitative study on performance bugs, pp. 199-208. , IEEE Working Conference on Mining Software Repositories. IEEE; https://econsultancy.com/site-speed-case-studies-tips-and-tools-for\-improving-your-conversion-rate/, Accessed: 14/10/19; https://blog.kissmetrics.com/wp-content/uploads/2011/04/loading-time.pdf, Accessed: 14/10/19; Jin, G., Song, L., Shi, X., Scherpelz, J., Lu, S., (2012) Understanding and detecting real-world performance bugs, pp. 77-88. , http://doi.org/10.1145/2254064.2254075, Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM,, New York, NY, USA; Molyneaux, I., (2009) The Art of Application Performance Testing: Help for Programmers and Quality Assurance, , O'Reilly Media, Sebastopol, USA; Reichelt, D.G., Kühne, S., (2018) How to detect performance changes in software history: performance analysis of software system versions, pp. 183-188. , http://doi.org/10.1145/3185768.3186404, Companion of the 2018 ACM/SPEC International Conference on Performance Engineering. ACM,, New York, NY, USA; Yan, D., Xu, G., Rountev, A., (2012) Uncovering performance problems in Java applications with reference propagation profiling, pp. 134-144. , http://dl.acm.org/citation.cfm?id=2337223.2337240, Proceedings of the 34th International Conference on Software Engineering. IEEE Press,, Piscataway, NJ, USA; Jovic, M., Hauswirth, M., Listener latency profiling: measuring the perceptible performance of interactive Java applications (2011) Science of Computer Programming, 76 (11), pp. 1054-1072. , https://doi.org/10.1016/j.scico.2010.04.009, pecial Issue on Principles and Practice of Programming in Java (PPPJ 2008); Vokolos, F.I., Weyuker, E.J., (1998) Performance testing of software systems, pp. 80-87. , Proceedings of the 1st International Workshop on Software and Performance. ACM; Segura, S., Troya, J., Durán, A., Ruiz-Cortés, A., (2017) Performance metamorphic testing: motivation and challenges, pp. 7-10. , International Conference on Software Engineering New Ideas and Emerging Results Track; Pan, K., Kim, S., Whitehead, E.J., Toward an understanding of bug fix patterns (2009) Empirical Software Engineering, 14 (3), pp. 286-315. , https://doi.org/10.1007/s10664-008-9077-5; Liu, Y., Xu, C., Cheung, S.-C., (2014) Characterizing and detecting performance bugs for smartphone applications, pp. 1013-1024. , http://doi.org/10.1145/2568225.2568229, Proceedings of the 36th International Conference on Software Engineering. ACM,, New York, NY, USA; Olivo, O., Dillig, I., Lin, C., (2015) Static detection of asymptotic performance bugs in collection traveresals, pp. 369-378. , ACM SIGPLAN Conference on Programming Language Design and Implementation; Shacham, O., Vechev, M., Yahav, E., (2009) Chameleon: adaptive selection of collections, 44, pp. 408-418. , ACM Sigplan Notices, ACM; Papadakis, M., Kintis, M., Zhang, J., Le Traon, Y., Harman, M., Mutation testing advances: an analysis and survey (2017) Advances in Computers, 112, pp. 275-378; Linares-Vásquez, M., Bavota, G., Tufano, M., Moran, K., Di Penta, M., Vendome, C., Bernal-Cárdenas, C., Poshyvanyk, D., (2017) Enabling mutation testing for Android apps, pp. 233-244. , http://doi.org/10.1145/3106237.3106275, Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM,, New York, NY, USA; Nilsson, R., Offutt, J., Mellin, J., Test case generation for mutation-based testing of timeliness (2006) Electronic Notes in Theoretical Computer Science, 164 (4), pp. 97-114. , https://doi.org/10.1016/j.entcs.2006.10.010, Proceedings of the Second Workshop on Model Based Testing (MBT 2006); Temple, P., Acher, M., Jézéquel, J.-M., (2018) Multimorphic testing, pp. 432-433. , http://doi.org/10.1145/3183440.3195043, Proceedings of the 40th International Conference on Software Engineering Companion Proceeedings. ACM,, New York, NY, USA; Vega, J.J.O., Perrouin, G., Amrani, M., Schobbens, P., (2018) Model-based mutation operators for timed systems: a taxonomy and research agenda, pp. 325-332. , https://doi.org/10.1109/QRS.2018.00045, 2018 IEEE International Conference on Software Quality, Reliability and Security (QRS); López, J., Kushik, N., Yevtushenko, N., Source code optimization using equivalent mutants (2018) Information and Software Technology, 103, pp. 138-141. , https://doi.org/10.1016/j.infsof.2018.06.013; Lisper, B., Lindström, B., Potena, P., Saadatmand, M., Bohlin, M., (2017) Targeted mutation: efficient mutation analysis for testing non-functional properties, pp. 65-68. , 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW); Sánchez, A.B., Delgado-Pérez, P., Segura, S., Medina-Bulo, I., Performance mutation testing: hypothesis and open questions (2018) Information and Software Technology, 103, pp. 159-161. , 10.1016/j.infsof.2018.06.015; Sánchez, A.B., Delgado-Pérez, P., Medina-Bulo, I., Segura, S., (2018) Search-based mutation testing to improve performance tests, pp. 316-317. , http://doi.org/10.1145/3205651.3205670, Proceedings of the Genetic and Evolutionary Computation Conference Companion. ACM,, New York, NY, USA; Papadakis, M., Jia, Y., Harman, M., Le Traon, Y., (2015) Trivial compiler equivalence: a large scale empirical study of a simple, fast and effective equivalent mutant detection technique, 1, pp. 936-946. , https://doi.org/10.1109/ICSE.2015.103, Proceedings of the 37th International Conference on Software Engineering - IEEE Press,, Piscataway, NJ, USA; Ongkosit, T., Takada, S., (2014) Responsiveness analysis tool for Android application, pp. 1-4. , http://doi.org/10.1145/2661694.2661695, Proceedings of the 2nd International Workshop on Software Development Lifecycle for Mobile. ACM,, New York, NY, USA; Nistor, A., Chang, P., Radoi, C., Lu, S., (2015) Caramel: detecting and fixing performance problems that have non-intrusive fixes, 1, pp. 902-912. , 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering; Yang, S., Yan, D., Rountev, A., (2013) Testing for poor responsiveness in android applications, pp. 1-6. , 2013 1st International Workshop on the Engineering of Mobile-Enabled Systems (MOBS); Han, S., Dang, Y., Ge, S., Zhang, D., Xie, T., (2012) Performance debugging in the large via mining millions of stack traces, pp. 145-155. , 2012 34th International Conference on Software Engineering (ICSE); Zhang, P., Elbaum, S., Dwyer, M.B., (2011) Automatic generation of load tests, pp. 43-52. , https://doi.org/10.1109/ASE.2011.6100093, Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering. IEEE Computer Society,, Washington, DC, USA; Lindström, B., Offutt, J., Gonzalez-Hernandez, L., Andler, S.F., (2018) Identifying useful mutants to test time properties, pp. 69-76. , 2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW); Ma, Y.-S., Offutt, J., Kwon, Y.R., MuJava: an automated class mutation system (2005) Software Testing, Verification and Reliability, 15 (2), pp. 97-133; Delgado-Pérez, P., Medina-Bulo, I., Palomo-Lozano, F., García-Domínguez, A., Domínguez-Jiménez, J.J., Assessment of class mutation operators for C++ with the MuCPP mutation system (2017) Information and Software Technology, 81, pp. 169-184. , https://dx.doi.org/10.1016/j.infsof.2016.07.002; Derezińska, A., (2006) Quality assessment of mutation operators dedicated for C# programs, pp. 227-234. , https://dx.doi.org/10.1109/QSIC.2006.51, 2006 Sixth International Conference on Quality Software (QSIC'06); Shahriar, H., Zulkernine, M., (2009) Mutec: mutation-based testing of cross site scripting, pp. 47-53. , Proceedings of the 2009 ICSE Workshop on Software Engineering for Secure Systems. IEEE Computer Society; Delamaro, M.E., Maldonado, J.C., Mathur, A.P., Interface mutation: an approach for integration testing (2001) IEEE Transactions on Software Engineering, 27 (3), pp. 228-247; Lee, S.C., Offutt, A.J., (2001) Generating test cases for XML-based web component interactions using mutation analysis, pp. 200-209. , Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE'01),, Hong Kong, China; Fabbri, S.P.F., Delamaro, M.E., Maldonado, J.C., Masiero, P.C., (1994) Mutation analysis testing for finite state machines, pp. 220-229. , Proceedings of the 5th International Symposium on Software Reliability Engineering,, Monterey, California; Aichernig, B.K., Lorber, F., Ničković, D., (2013) Time for mutants – model-based mutation testing with timed automata, pp. 20-38. , Tests and Proofs, Edited by, M Veanes, L Viganò, Springer Berlin Heidelberg, Berlin, Heidelberg; Offutt, A.J., Investigations of the software testing coupling effect (1992) ACM Transactions on Software Engineering Methodology, 1 (1), pp. 5-20. , http://doi.org/10.1145/125489.125473; Gopinath, R., (2017) On the limits of mutation analysis, , http://hdl.handle.net/1957/61528, Dissertation; Langdon, W.B., Harman, M., Optimizing existing software with genetic programming (2015) IEEE Transactions on Evolutionary Computation, 19 (1), pp. 118-135; TinyXML2, , https://github.com/leethomason/tinyxml2, Accessed 14/10/19; XmlRPC++, , http://xmlrpcpp.sourceforge.net/, Accessed 14/10/19; Dolphin, , https://www.kde.org/applications/system/dolphin, Accessed 14/10/19; Ammann, P., Offutt, J., (2008) Introduction to Software Testing, , 1st ed., Cambridge University Press, New York, NY, USA; Daran, M., Thévenod-Fosse, P., Software error analysis: a real case study involving real faults and mutations (1996) SIGSOFT Software Engineering Notes, 21 (3), pp. 158-171. , https://doi.org/10.1145/226295.226313; Delgado-Pérez, P., Habli, I., Gregory, S., Alexander, R., Clark, J., Medina-Bulo, I., Evaluation of mutation testing in a nuclear industry case study (2018) IEEE Transactions on Reliability, 67 (4), pp. 1406-1419; AbouTrab, M.S., Brockway, M., Counsell, S., Hierons, R.M., Testing real-time embedded systems using timed automata based approaches (2013) Journal of Systems and Software, 86 (5), pp. 1209-1223. , https://doi.org/10.1016/j.jss.2012.12.030; Wu, F., Nanavati, J., Harman, M., Jia, Y., Krinke, J., Memory mutation testing (2017) Information and Software Technology, 81, pp. 97-111. , https://doi.org/10.1016/j.infsof.2016.03.002; LLVM's passes, , https://llvm.org/docs/Passes.html, Accessed 14/10/19","Delgado-Pérez, P.; Escuela Superior de Ingeniería, Universidad de CádizSpain; email: pedro.delgado@uca.es",,,John Wiley and Sons Ltd,,,,,09600833,,JTREE,,English,Software Test Verif Reliab,Conference Paper,Article in Press,,Scopus,2-s2.0-85078796787
"Qin X., Liu S., Tao Z.",57215656560;35243051900;57215653828;,A new mutant generation algorithm based on basic path coverage for mutant reduction,2020,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),12028 LNCS,5,,167,186,,,10.1007/978-3-030-41418-4_13,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081574699&doi=10.1007%2f978-3-030-41418-4_13&partnerID=40&md5=ad97ee8faa7740ef780916251f27bff5,"Faculty of Computer and Information Sciences, Hosei University, Tokyo, Japan; School of Software Northwestern, Polytechnical University, Xi’an, China","Qin, X., Faculty of Computer and Information Sciences, Hosei University, Tokyo, Japan, School of Software Northwestern, Polytechnical University, Xi’an, China; Liu, S., Faculty of Computer and Information Sciences, Hosei University, Tokyo, Japan; Tao, Z., School of Software Northwestern, Polytechnical University, Xi’an, China","Simple abstract. Two sentences.
",Mutant reduction; Mutation testing; Path coverage,Data flow analysis; Flow graphs; Formal languages; Software testing; Testing; Control flow graphs; Fault based testing techniques; Generation algorithm; Identification criterion; ITS applications; Mutation operators; Mutation testing; Path coverage; Graph algorithms,,,,,,,,"Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678; Offutt, A.J., Untch, R.H., (2001) Mutation 2000: Uniting the Orthogonal. Mutation Testing for the New Century, , Kluwer Academic Publishers, Berlin; Just, R., Ernst, M.D., Fraser, G., (2014) Efficient Mutation Analysis by Propagating and Partitioning Infected Execution States; Namin, A.S., Andrews, J.H., Murdoch, D.J., Sufficient mutation operators for measuring test effectiveness (2008) ACM Press the 13Th International Conference on Software Engineering-Icse 2008-Leipzig, Germany, 10–18 May 2008, p. 351; Allen, F.E., Control flow analysis (1970) ACM Sigplan Not, 5 (7), pp. 1-19; Zapata, F., Akundi, A., Pineda, R., Smith, E., Basis path analysis for testing complex system of systems. Procedia Comput (2013) Sci, 20 (Complete), pp. 256-261; Papadakis, M., Malevris, N., Automatically performing weak mutation with the aid of symbolic execution, concolic testing and search-based testing (2011) Softw. Qual. J., 19 (4), pp. 691-723; Eason, G., Noble, B., Sneddon, I.N., On certain integrals of Lipschitz-Hankel type involving products of Bessel functions (1955) Phil. Trans. Roy. Soc. London A, 247, pp. 529-551; Fraser, G., Zeller, A., Mutation-driven generation of unit tests and Oracles (2012) IEEE Trans. Softw. Eng., 38 (2), pp. 278-292; Acree, A.T., (1980) On Mutation, , Ph.D. Dissertation, Georgia Institute of Technology; Mathur, A.P., Performance, effectiveness, and reliability issues in software testing (1991) International Computer Software & Applications Conference. IEEE; Jia, Y., Harman, M., Constructing Subtle Faults Using Higher Order Mutation Testing (2008) 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation; Hussain, S., (2008) Mutation Clustering. Ph.D. Dissertation, , King’s College, London, UK; Zhang, J., Scalability studies on selective mutation testing (2015) IEEE/ACM 37Th IEEE International Conference on Software Engineering (ICSE), Florence, Italy, 5–24 May, 2015, pp. 851-854. , pp., 2015; Yao, X., Harman, M., Jia, Y., A study of equivalent and stubborn mutation operators using human analysis of equivalence (2014) Proceedings of the 36Th International Conference on Software Engineering-Icse 2014, Hyderabad, India, 31 May–07 June 2014, pp. 919-930; Delamaro, M.E., Li, N., Offutt, J., Experimental evaluation of SDL and one-op mutation for C (2014) IEEE Seventh International Conference on Software Testing. IEEE; Hutchins, M., Foster, H., Goradia, T., Experiments on the effectiveness of dataflow-and control-flow-based test adequacy criteria (1994) International Conference on Software Engineering. IEEE; Harman, M., Jia, Y., Mateo, R.P., Angels and monsters: An empirical investigation of potential test effectiveness and efficiency improvement from strongly subsuming higher order mutation (2014) Proceedings of the 29Th ACM/IEEE International Conference on Automated Software Engineering, , ACM; Girgis, M.R., Woodward, M.R., An integrated system for program testing using weak mutation and data flow analysis (1985) International Conference on Software Engineering, , IEEE Computer Society Press; Krauser, E.W., Mathur, A.P., Rego, V.J., High performance software testing on SIMD machines (2002) IEEE Trans. Softw. Eng., 17 (5), pp. 403-423; Allen, F.E., Cocke, J., A program data flow analysis procedure (1976) Commun. ACM, 19 (3), p. 137","Qin, X.; Faculty of Computer and Information Sciences, Hosei UniversityJapan; email: qin.xu.6d@stu.hosei.ac.jp",Miao H.Tian C.Liu S.Duan Z.,,Springer,"9th International Workshop on Structured Object-Oriented Formal Language and Method, SOFL+MSVL 2019",5 November 2019 through 5 November 2019,,237929,03029743,9783030414177,,,English,Lect. Notes Comput. Sci.,Conference Paper,Final,,Scopus,2-s2.0-85081574699
"Gutiérrez-Madroñal L., Medina-Bulo I., Merayo M.G.",55654774700;22433447400;14037866800;,Mutation Operators for Google Query Language,2020,Communications in Computer and Information Science,1178 CCIS,,,354,365,,,10.1007/978-981-15-3380-8_31,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082106056&doi=10.1007%2f978-981-15-3380-8_31&partnerID=40&md5=84a60d90eb0b9c34fb08a06c83177b89,"UCASE Research Group, University of Cádiz, Puerto Real, Spain; Design and Testing of Reliable Systems Research Group, Complutense University of Madrid, Madrid, Spain","Gutiérrez-Madroñal, L., UCASE Research Group, University of Cádiz, Puerto Real, Spain; Medina-Bulo, I., UCASE Research Group, University of Cádiz, Puerto Real, Spain; Merayo, M.G., Design and Testing of Reliable Systems Research Group, Complutense University of Madrid, Madrid, Spain","Nowadays the technology is being created and adapted to satisfy the user necessities. Among them, obtaining information as fast as possible. Google knows how to meet this demand developing and offering new services that provide the requested information quickly. Google technology can be used to develop products using the Google App Engine (GAE). In order to manipulate the data, GAE uses the Google Query Language (GQL), a SQL-like language, that has been designed to provide a solution to the necessity of having super-fast access to data warehouses. The quality of the developed products is essential and therefore, testing them is mandatory. In this paper, we propose the use of mutation testing to detect faults during the development of applications that use GQL. With this goal, we introduce a set of specific mutation operators for GQL. © 2020, Springer Nature Singapore Pte Ltd.",Google App Engine; Google Query Language; Mutation testing,Data warehouses; Engines; Platform as a Service (PaaS); Query languages; Query processing; Software testing; Google app engines; Mutation operators; Mutation testing; New services; Search engines,,,,,,,,"Barry, P., Doing IT the app engine way (2010) Linux J., 2010 (197); Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) Computer, 11 (4), pp. 34-41. , ISSN 0018–9162; Gómez-Abajo, P., A tool for domain-independent model mutation (2018) Sci. Comput. Program., 163, pp. 85-92; Google App Engine, , https://cloud.google.com/appengine/docs; Google App Engine: Structuring Data for Strong Consistency, , https://cloud.google.com/appengine/docs/standard/java/datastore/structuringforstrongconsistency; Google Cloud Patform, , https://cloud.google.com/docs; Google Query Language in Google App Engine, , https://cloud.google.com/appengine/docs/standard/python/datastore/gqlreference; Pick Strong Consistency, , https://cloud.google.com/blog/products/gcp/why-you-should-pick-strong-consistency-whenever-possible; Gutiérrez-Madroñal, L., García-Domínguez, A., Medina-Bulo, I., Evolutionary mutation testing for IoT with recorded and generated events (2019) Softw. Pract. Exper., 49 (4), pp. 640-672; Gutiérrez-Madroñal, L., Medina-Bulo, I., Domínguez-Jiménez, J.J., Evaluation of EPL mutation operators with the MuEPL mutation system (2019) Expert Syst. Appl., 116, pp. 78-95. , ISSN 0957–4174; Gutiérrez-Madroñal, L., Mutation testing of event processing queries (2012) 2012 IEEE 23Rd International Symposium on Software Reliability Engineering, pp. 21-30. , pp; Hamlet, R.G., Testing programs with the aid of a compiler (1977) IEEE Trans. Software Eng. SE, 3 (4), pp. 279-290. , ISSN 2326–3881; Hees, J., Bauer, R., Folz, J., Borth, D., Dengel, A., An evolutionary algorithm to learn SPARQL queries for source-target-pairs (2016) EKAW 2016. LNCS (LNAI), 10024, pp. 337-352. , https://doi.org/10.1007/978-3-319-49004-522, Blomqvist, E., Ciancarini, P., Poggi, F., Vitali, F. (eds.), pp., Springer, Cham; Hierons, R.M., Merayo, M.G., Núñez, M., An extended framework for passive asynchronous testing (2017) J. Log. Algebraic Methods Program., 86 (1), pp. 408-424; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Software Eng., 37 (5), pp. 649-678. , ISSN 2326–3881; Merayo, M.G., Hierons, R.M., Núñez, M., A tool supported methodology to passively test asynchronous systems with multiple users (2018) Inf. Softw. Technol., 104, pp. 162-178; Merayo, M.G., Hierons, R.M., Núñez, M., Passive testing with asynchronous communications and timestamps (2018) Distrib. Comput, 31 (5), pp. 327-342; Tuya, J., Suárez-Cabal, M.J., Riva, C., Mutating database queries (2007) Inf. Softw. Technol., 49 (4), pp. 398-417. , ISSN 0950–5849; Vázquez-Ingelmo, A., Cruz-Benito, J., García-Peñalvo, F.J., Improving the OEEU’s data-driven technological ecosystem’s interoperability with GraphQL (2017) Proceedings of the 5Th International Conference on Technological Ecosystems for Enhancing Multiculturality, pp. 1-89","Gutiérrez-Madroñal, L.; UCASE Research Group, University of CádizSpain; email: lorena.gutierrez@uca.es",Sitek P.Pietranik M.Krotkiewicz M.Srinilta C.,,Springer,"12th Asian Conference on Intelligent Information and Database Systems, ACIIDS 2020",23 March 2020 through 26 March 2020,,238259,18650929,9789811533792,,,English,Commun. Comput. Info. Sci.,Conference Paper,Final,,Scopus,2-s2.0-85082106056
"Derezinska A., Zaremba Ł.",6508199259;55580254800;,Model-Driven Software Development Combined with Semantic Mutation of UML State Machines,2020,Communications in Computer and Information Science,1172 CCIS,,,204,226,,,10.1007/978-3-030-40223-5_10,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85080906771&doi=10.1007%2f978-3-030-40223-5_10&partnerID=40&md5=c0b6ccb05ceffa7cfb34c4ffd5b7dbd9,"Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, Warsaw, 00-665, Poland","Derezinska, A., Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, Warsaw, 00-665, Poland; Zaremba, Ł., Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, Warsaw, 00-665, Poland","The paper presents an approach to semantic mutation of state machines that specify class behavior in Model-Driven Software Development. The mutations are aimed at different variants of UML state machine behavior. Mutation testing of a target application allows to compare different semantic interpretations and verify a set of test cases. We present a notation of a process combining model-driven development with semantic mutation and semantic consequence-oriented mutations. Origin and details of the proposed mutation operators are discussed. The approach has been supported by the Framework for eXecutable UML (FXU) that creates a C# application from UML classes and state machines. The tool architecture has been reengineered in order to apply semantic mutation operators into the model-driven development process and realize testing on a set of semantic mutants. The tool and the implemented mutation operators have been verified in a case study on a status service for a social network. © 2020, Springer Nature Switzerland AG.",C#; Framework for eXecutable UML (FXU); Model-Driven Software Development; Mutation testing; State machine code generation,Cesium; Semantics; Software testing; Executable UML; Model driven development; Model-Driven Software Development; Mutation operators; Mutation testing; Semantic interpretation; State machine; Target application; Software design,,,,,,,,"Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Softw. Eng., 37 (5), pp. 649-678. , https://doi.org/10.1109/tse.2010.62; Papadakis, M., Kintis, M., Zhang, J., Jia, Y., Traon, Y.L., Harman, M., Mutation testing advances: An analysis and survey (2019) Adv. Comput., 112, pp. 275-378. , https://doi.org/10.1016/bs.adcom.2018.03.015; Liddle, S.W., Model-Driven Software Development (2011) Handbook of Conceptual Modeling, pp. 17-54. , Embley, D.W., Thalheim, B. (eds.), Springer, Heidelberg; Domınguez, E., Perez, B., Rubio, A.L., Zapata, M.A., A systematic review of code generation proposals from state machine specifications (2012) Inf. Softw. Technol., 54 (10), pp. 1045-1066. , https://doi.org/10.1016/j.infsof.2012.04.008; Derezinska, A., Zaremba, Ł., Mutating UML state machine behavior with semantic mutation operators (2019) Proceedings of the 14Th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE, 1, pp. 385-393. , https://doi.org/10.5220/0007735003850393, Damiani, E., Spanoudakis, G., Maciaszek, L. (eds.), Scitepress, Setubal; (2017) UML (Unified Modelling Language), , http://www.omg.org/spec/UML; Clark, J.A., Dan, H., Hierons, R.M., Semantic mutation testing (2013) Sci. Comput. Program., 78 (4), pp. 345-363. , https://doi.org/10.1016/j.scico.2011.03.011; Harel, D., A visual formalism for complex systems (1987) Sci. Comput. Program., 8 (3), pp. 231-274; Liebel, G., Marko, N., Tichy, M., Leitner, A., Hansson, J., Model-based engineering in the embedded systems domain: An industrial survey on the state-of-practice (2018) Softw. Syst. Model., 17 (1), pp. 91-113. , https://doi.org/10.1007/s10270-016-0523-3; Beeck, M., A comparison of Statecharts variants (1994) FTRTFT 1994. LNCS, 863, pp. 128-148. , https://doi.org/10.1007/3-540-58468-4_163, Langmaack, H., de Roever, W.-P., Vytopil, J. (eds.), Springer, Heidelberg; Badreddin, O., Lethbridge, T.C., Forwared, A., Elaasar, M., Aljamaan, H., Garzon, M.A., Enhanced code generation from UML composite state machines (2014) Proceedings of the 2Nd International Conference on Model-Driven Engineering and Software Development (MODELSWARD), pp. 235-245. , https://doi.org/10.5220/0004699602350245, SCITEPRESS-Science and Technology Publications, Setubal; Chauvel, F., Jézéquel, J.-M., Code generation from UML models with semantic variation points (2005) MODELS 2005. LNCS, 3713, pp. 54-68. , https://doi.org/10.1007/11557432_5, Briand, L., Williams, C. (eds.), Springer, Heidelberg; Prout, A., Atlee, J.M., Day, N.A., Shaker, P., Code generation for a family of executable modelling notations (2012) Softw. Syst. Model., 11 (2), pp. 251-272. , https://doi.org/10.1007/s10270-010-0176-6; Derezińska, A., Pilitowski, R., Interpretation of history pseudostates in orthogonal states of UML state machines (2009) NGITS 2009. LNCS, 5831, pp. 26-37. , https://doi.org/10.1007/978-3-642-04941-5_5, Feldman, Y.A., Kraft, D., Kuflik, T. (eds.), Springer, Heidelberg; Derezinska, A., Szczykulski, M., Interpretation problems in code generation from UML state machines-a comparative study (2012) Computing in Science and Technology 2011: Monographs in Applied Informatics, pp. 36-50. , Kwater, T. (ed.), Department of Applied Informatics Faculty of Applied Informatics and Mathematics, Warsaw University of Life Sciences; Batouta, Z.I., Dehbi, R., Talea, M., Hajoui, O., Automation in code generation: Tertiary and systematic mapping review (2017) 4Th IEEE International Colloquium on Information Science and Technology (CIST), pp. 200-205. , https://doi.org/10.1109/cist.2016.7805042; Sunitha, E.V., Samuel, P., Object oriented method to implement the hierarchical and concurrent states in UML state chart diagrams (2016) Software Engineering Research, Management and Applications. SCI, 654, pp. 133-149. , https://doi.org/10.1007/978-3-319-33903-0_10, Lee, R. (ed.), Springer, Cham; Samek, M., Practical statecharts in C/C ++: Quantum programming for embedded systems (2002) CMP Books; Wasowski, A., (2005) Code Generation and Model Driven Development for Constrained Embedded Software, , Ph.D. thesis, University of Copenhagen; Pilitowski, R., Dereziñska, A., Code generation and execution framework for UML 2.0 classes and state machines (2007) Innovations and Advanced Techniques in Computer and Information Sciences and Engineering, pp. 421-427. , https://doi.org/10.1007/978-1-4020-6268-1_75, Sobh, T. (ed.), Springer, Dordrecht; Iqbal, M.Z., Arcuri, A., Briand, L., Environment modeling and simulation for automated testing of soft real-time embedded software (2013) Softw. Syst. Model., 14 (1), pp. 483-524. , https://doi.org/10.1007/s10270-013-0328-6; Burden, H., Heldal, R., Siljamaki, T., Executable and translatable UML – how difficult can it be? (2011) 18Th Asia-Pacific Software Engineering Conference, pp. 5-8. , https://doi.org/10.1109/apsec.2011.37, IEEE Computer Society, Washington; Hoefig, E., (2011) Interpretation of Behaviour Models at Runtime: Performance Benchmark and Case Studies, , http://dx.doi.org/10.14279/depositonce-2842, Ph.D. thesis, Berlin Institute of Technology, Accessed 08 Aug 2019; IBM RSA (Rational Software Architect), , https://www.ibm.com/developerworks/downloads/r/architect, Accessed 08 Aug 2019; (2018) Fuml: Semantics of a Foundation Subset for Executable UML Models, , http://www.omg.org/spec/FUML/, 01 Dec 2018; IBM RRD (Rational Rhapsody Developer)., , https://www.ibm.com/developerworks/downloads/r/rhapsodydeveloper/, Accessed 08 Aug 2019; http://galera.ii.pw.edu.pl/*adr/FXU/, Accessed 08 Aug 2019; Derezińska, A., Szustek, A., Object-oriented testing capabilities and performance evaluation of the c# mutation system (2012) CEE-SET 2009. LNCS, 7054, pp. 229-242. , https://doi.org/10.1007/978-3-642-28038-2_18, Szmuc, T., Szpyrka, M., Zendulka, J. (eds.), Springer, Heidelberg; Derezińska, A., Trzpil, P., Mutation testing process combined with test-driven development in NET environment (2015) Theory and Engineering of Complex Systems and Dependability. Depcos-Relcomex 2015. Advances in Intelligent Systems and Computing, 365, pp. 131-140. , https://doi.org/10.1007/978-3-319-19216-1_13, Zamojski, W., Mazurkiewicz, J., Sugier, J., Walkowiak, T., Kacprzyk, J. (eds.), Springer, Cham; Belli, F., Budnik, C.J., Hollmann, A., Tuglular, T., Wong, W.E., Model-based mutation testing-approach and case studies (2016) Sci. Comput. Program., 120 (1), pp. 25-48. , https://doi.org/10.1016/j.scico.2016.01.003; Derezinska, A., Object-oriented mutation to assess the quality of tests (2003) Proceedings of the 29Th Euromicro Conference, pp. 417-420. , https://doi.org/10.1109/eurmic.2003.1231626; Strug, J., Applying mutation testing for assessing test suites quality at model level (2016) Proceedings of the 2016 Federated Conference on Computer Science and Information Systems, Fedcsis, Annals of Computer Science and Information Systems, 8, pp. 1593-1596. , https://doi.org/10.15439/2016f82; Fabbri, S.C.P.F., Delmaro, M.E., Maldonado, J.C., Masiero, P.C., Mutation analysis testing for finite state machines (1994) Proceedings of the 5Th IEEE International Symposium on Software Reliability Engineering, pp. 220-229. , https://doi.org/10.1109/issre.1994.341378, IEEE Computer Society Press; Fabbri, S.C.P.F., Maldonado, J.C., Sugeta, T., Masiero, P.C., Mutation testing applied to validate specifications based on statecharts (1999) Proceedings 10Th International Symposium on Software Reliability Engineering (Cat. No. PR00443), ISSRE 1999, pp. 210-219. , https://doi.org/10.1109/issre.1999.809326, IEEE Computer Society; Trakhtenbrot, M., New mutations for evaluation of specification and implementation levels of adequacy in testing of Statecharts models (2007) Proceedings of Testing: Academic and Industrial Conference Practice and Research Techniques – MUTATION, TAICPART-MUTATION 2007, pp. 151-160. , https://doi.org/10.1109/taic.part.2007.23, IEEE; Trakhtenbrot, M., Implementation-oriented mutation testing of Statechart models (2010) IEEE International Conference on Software Testing Verification and Validation Workshops (ICSTW, pp. 120-125. , https://doi.org/10.1109/icstw.2010.55, IEEE; Trakhtenbrot, M., Mutation patterns for temporal requirements of reactive systems (2017) IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 116-121. , https://doi.org/10.1109/icstw.2017.27; Bartolini, C., Software testing techniques revisited for OWL ontologies (2017) MODELSWARD 2016. CCIS, 692, pp. 132-153. , https://doi.org/10.1007/978-3-319-66302-9_7, Hammoudi, S., Pires, L.F., Selic, B., Desfray, P. (eds.), Springer, Cham; Harel, D., STATEMATE: A working environment for the development of complex reactive systems (1990) IEEE Trans. Softw. Eng., 16 (4), pp. 403-414. , https://doi.org/10.1109/32.54292; (2018) Object Management Group: UML Profile for MARTE: Modeling and Analysis of Real-Time Embedded Systems, , http://www.omg.org/spec/MARTE/; Derezińska, A., Redosz, K., Reuse of project code in model to code transformation (2014) Information Systems Architecture and Technology, Contemporary Approaches to Design and Evolution of Information Systems, pp. 79-88. , Borzemski, L., et al. (eds.), Oficyna Wydawnicza Politechniki Wroclawskiej, Wroclaw; Derezinska, A., Zaremba, Ł., Approaches to semantic mutation of behavioral state machines in model-driven software development (2018) Proceedings of the 2018 Federated Conference on Computer Science and Information Systems, ACSIS, 15, pp. 863-866. , https://doi.org/10.15439/2018f313; Derezinska, A., Szczykulski, M., Towards C# application development using UML state machines: A case study (2013) Emerging Trends in Computing, Informatics, System Sciences, and Engineering. LNEE, 151, pp. 793-803. , https://doi.org/10.1007/978-1-4614-3558-7_68, Sobh, T., Elleithy, K. (eds.), Springer, New York","Derezinska, A.; Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, Poland; email: A.Derezinska@ii.pw.edu.pl",Damiani E.Spanoudakis G.Maciaszek L.A.Maciaszek L.A.,,Springer,"14th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE 2019",4 May 2019 through 5 May 2019,,237199,18650929,9783030402228,,,English,Commun. Comput. Info. Sci.,Conference Paper,Final,,Scopus,2-s2.0-85080906771
"Usman A., Ibrahim N., Salihu I.A.",57202460880;56036883900;57077031600;,TEGDroid: Test case generation approach for android apps considering context and GUI events,2020,"International Journal on Advanced Science, Engineering and Information Technology",,1,,16,23,,,10.18517/ijaseit.10.1.10194,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081236675&doi=10.18517%2fijaseit.10.1.10194&partnerID=40&md5=bf403b26e8c6c3090de5596ce3ad31ea,"Faculty of Sciences, Department of Computer Science, Abdu Gusau Polytechnic Talata Mafara, 892, Zamfara State, Nigeria; Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Department of Software Engineering, Faculty of Natural and Applied Sciences, Nile University of Nigeria, Abuja, Nigeria","Usman, A., Faculty of Sciences, Department of Computer Science, Abdu Gusau Polytechnic Talata Mafara, 892, Zamfara State, Nigeria, Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Ibrahim, N., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Salihu, I.A., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia, Department of Software Engineering, Faculty of Natural and Applied Sciences, Nile University of Nigeria, Abuja, Nigeria","The advancement in mobile technologies has led to the production of mobile devices (e.g. smartphone) with rich innovative features. This has enabled the development of mobile applications that offer users an advanced and extremely localized context-aware content. The recent dependence of people on mobile applications for various computational needs poses a significant concern on the quality of mobile applications. In order to build a high quality and more reliable applications, there is a need for effective testing techniques to test the applications. Most existing testing technique focuses on GUI events only without sufficient support for context events. This makes it difficult to identify other defects in the changes that can be inclined by context in which an application runs. This paper presents an approach named TEGDroid for generating test case for Android Apps considering both context and GUI Events. The GUI and context events are identified through the static analysis of bytecode, and the analysis of app's permission from the XML file. An experiment was performed on real world mobile apps to evaluate TEGDroid. Our experimental results show that TEGDroid is effective in identifying context events and had 65%-91% coverage across the eight selected applications. To evaluate the fault detection capability of this approach, mutation testing was performed by introducing mutants to the applications. Results from the mutation analysis shows that 100% of the mutants were killed. This indicates that TEGDroid have the capability to detect faults in mobile apps. © 2020 Insight Society.",Context event; GUI event; Mobile application test case generation; Software testing,,,,,,"Universiti Tun Hussein Onn Malaysia, UTHM

Universiti Tun Hussein Onn Malaysia, UTHM",We would like to acknowledge the support from Ministry of Higher Education and university Tun Hussein Onn Malaysia (UTHM) in undertaking the research under the Graduate Research Assistant for Postgraduate Research Grants (GPPS) and Fundamental Research Grant (FRGS) Vot number 1610.,,"Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 7th International Workshop on Automation of Software Test (AST), pp. 29-35; Tamilarasi, T., Prasanna, M., Research and Development on Software Testing Techniques and Tools (2018) Encyclopedia of Information Science and Technology, pp. 7503-7513. , Fourth Edition, ed: IGI Global; Salihu, I.-A., Ibrahim, R., Ahmed, B.S., Zamli, K.Z., Usman, A., (2019) AMOGA: A Static-Dynamic Model Generation Strategy for Mobile Apps Testing, 7, pp. 17158-17173. , IEEE Access; Qasim, I., Azam, F., Anwar, M.W., Tufail, H., Qasim, T., Mobile User Interface Development Techniques: A Systematic Literature Review (2018) IEEE 9th Annual Information Technology, Electronics and Mobile Communication Conference (IEMCON), pp. 1029-1034; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 252-261. , IEEE; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21, pp. 65-105; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) 2nd International Conference on Computer Engineering and Technology (ICCET), pp. V2-297; Morgado, I.C., Paiva, A.C., Faria, J.P., Automated pattern-based testing of mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC), pp. 294-299; Salihu, I.A., Ibrahim, R., Comparative Analysis of GUI Reverse Engineering Techniques (2016) Advanced Computer and Communication Engineering Technology, pp. 295-305. , ed: Springer; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86, pp. 1978-2001; Aho, P., Suarez, M., Memon, A., Kanstrén, T., Making GUI Testing Practical: Bridging the Gaps (2015) 12th International Conference on Information Technology-New Generations (ITNG), pp. 439-444; Amalfitano, D., Amatucci, N., Tramontana, P., Fasolino, A.R., Memon, A.M., A General Framework for comparing Automatic Testing Techniques of Android Mobile Apps (2016) Journal of Systems and Software; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2018) IEEE Transactions on Reliability, 68, pp. 45-66; Salihu, I.A., Ibrahim, R., Systematic Exploration of Android Apps' Events for Automated Testing (2016) Proceedings of the 14th International Conference on Advances in Mobile Computing and Multi Media, pp. 50-54; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in GUI testing of android applications (2016) Proceedings of the 38th International Conference on Software Engineering, pp. 559-570; Song, K., Han, A.-R., Jeong, S., Cha, S.D., Generating various contexts from permissions for testing Android applications (2015) SEKE, pp. 87-92; Méndez-Porras, A., Quesada-Löpez, C., Jenkins, M., Automated testing of mobile applications: A systematic map and review (2015) XVIII Ibero-American Conference on Software Engineering, pp. 195-208. , Lima-Peru; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 126-133; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond GUI testing for android applications (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, pp. 27-37; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83, pp. 60-66; Griebe, T., Gruhn, V., A model-based approach to test automation for context-aware mobile applications (2014) Proceedings of the 29th Annual ACM Symposium on Applied Computing, pp. 420-427; Majchrzak, T.A., Schulte, M., Context-dependent testing of applications for mobile devices (2015) Open Journal of Web Technologies (OJWT), 2, pp. 27-39; Yu, S., Takada, S., Mobile application test case generation focusing on external events (2016) Proceedings of the 1st International Workshop on Mobile Development, pp. 41-42; Bartel, A., Klein, J., Le Traon, Y., Monperrus, M., Dexpler: Converting android dalvik bytecode to jimple for static analysis with soot (2012) Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program analysis, pp. 27-38; Wichmann, B., Canning, A., Clutterbuck, D., Winsborrow, L., Ward, N., Marsh, D., Industrial perspective on static analysis (1995) Software Engineering Journal, 10, pp. 69-75; Yang, S., Wu, H., Zhang, H., Wang, Y., Swaminathan, C., Yan, D., Static window transition graphs for Android (2018) Automated Software Engineering, 25, pp. 833-873; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265; Salihu, I.A., Ibrahim, R., Mustapha, A., A Hybrid Approach for Reverse Engineering GUI Model from Android Apps for Automated Testing (2017) Journal of Telecommunication, Electronic and Computer Engineering (JTEC), 9, pp. 45-49; GATOR: Program Analysis Toolkit For Android; Mujahid, S., Abdalkareem, R., Shihab, E., Studying permission related issues in android wearable apps (2018) 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 345-356; Usman, A., Ibrahim, N., Salihu, I.A., Test Case Generation from Android Mobile Applications Focusing on Context Events (2018) Proceedings of the 2018 7th International Conference on Software and Computer Applications, pp. 25-30; Levinson, J., (2011) Software Testing with Visual Studio 2010: Pearson Education; Horvâth, F., Gergely, T., Beszédes, A., Tengeri, D., Balogh, G., Gyimöthy, T., Code coverage differences of Java bytecode and source code instrumentation tools (2019) Software Quality Journal, 27, pp. 79-123; An open source Java code coverage tool, , http://emma.sourceforge.net/; Gay, G., Staats, M., Whalen, M., Heimdahl, M.P., The risks of coverage-directed test case generation (2015) IEEE Transactions on Software Engineering, 41, pp. 803-819; Inozemtseva, L., Holmes, R., Coverage is not strongly correlated with test suite effectiveness (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 435-445; Gopinath, R., Jensen, C., Groce, A., Code coverage for suite evaluation by developers (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 72-82; Papadakis, M., Kintis, M., Zhang, J., Jia, Y., Le Traon, Y., Harman, M., Mutation testing advances: An analysis and survey (2019) Advances in Computers, 112, pp. 275-378. , ed: Elsevier; Wei, Y., (2016) MuDroid: Mutation Testing for Android Apps; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE transactions on software engineering, 37, pp. 649-678; Iida, C., Takada, S., Reducing mutants with mutant killable precondition (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 128-133",,,,Insight Society,,,,,20885334,,,,English,Int. J. Adv. Sci. Eng. Inf. Technol.,Article,Final,,Scopus,2-s2.0-85081236675
