Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Patent Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Automatic Test Case Generation and Optimization Based on Mutation Testing,Y. Du; Y. Pan; H. Ao; N. Ottinah Alexander; Y. Fan,"Dept of Computer Science and Technology, Southwest University of Science and Technology; Dept of Computer Science and Technology, Southwest University of Science and Technology; Dept of Computer Science and Technology, Southwest University of Science and Technology; Dept of Computer Science and Technology, Southwest University of Science and Technology; Dept of Computer Science and Technology, Southwest University of Science and Technology","2019 IEEE 19th International Conference on Software Quality, Reliability and Security Companion (QRS-C)",,2019,,,522,523,"Based on defect implantation mutation testing technique not only serves as a standard for evaluating test cases but also guides how to generate high-quality test case sets. In order to reduce the number of mutants, we propose a mutation operator selection strategy according to Selective Mutation. From 19 mutation operators of Mujava we select 5 mutation operators to obtain a subset. Test cases using this subset are able to achieve an average variation score of more than 95% on the variants of the complete set. Then we propose a test case generation method combining mutation testing with a genetic algorithm. The crossover, insertion, change, and deletion operators of the test case set are redefined, and the test cases are optimized. Finally compared with some algorithms and tools we obtain a set of test cases with higher coverage and higher mutation score.",,978-1-7281-3925-8,10.1109/QRS-C.2019.00105,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8859495,"test case generation, mutation testing, mutation operator, genetic algorithm",Testing;Tools;Java;Sociology;Statistics;Genetic algorithms,genetic algorithms;program testing,automatic test case generation;defect implantation mutation testing technique;high-quality test case;mutation operator selection strategy;test case generation method;test case set;mutation score;selective mutation,,,,5,,,,,IEEE,IEEE Conferences
Event-Based Mutation Testing vs. State-Based Mutation Testing - An Experimental Comparison,F. Belli; M. Beyazit,"Fac. of Comput. Sci., Univ. of Paderborn, Paderborn, Germany; Fac. of Comput. Sci., Univ. of Paderborn, Paderborn, Germany",2011 IEEE 35th Annual Computer Software and Applications Conference,,2011,,,650,655,"Model-based testing (MBT) focuses on relevant, mostly user-centric features of the system under consideration (SUC) and enables test case generation without requiring source code. Depending on these features and the preferences of the tester, modeling can be event-based or state-based. This paper compares both techniques using mutation testing, which is originally code-based, but has recently been extended to enable also MBT. For the comparison, the paper introduces frameworks that are composed of a set of models, a set of mutation operators, a set of coverage criteria, and a set of test generation algorithms. The introduced concepts and notions are demonstrated over a case study based on a large web-based commercial portal. Analysis of the experimental data yields results on the discussed frameworks reviewing benefits and drawbacks of event-based and state-based testing.",0730-3157,978-0-7695-4439-7,10.1109/COMPSAC.2011.90,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032412,model-based testing;mutation testing;graphbased modeling;event sequence graph;finite-state machine;fault detection,Testing;Fault detection;Minimization;Context;Automata;Redundancy;Analytical models,portals;program testing;source coding;systems analysis,model-based testing;event based mutation testing;state-based mutation testing;system under consideration;test case generation;MBT;mutation operators;coverage criteria;test generation algorithms;Web portal,,2,,30,,,,,IEEE,IEEE Conferences
Bacterio: Java mutation testing tool: A framework to evaluate quality of tests cases,P. R. Mateo; M. P. Usaola,"Instituto de Tecnologías y Sistemas de la Información, University of Castilla-La Mancha, Ciudad Real, Spain; Instituto de Tecnologías y Sistemas de la Información, University of Castilla-La Mancha, Ciudad Real, Spain",2012 28th IEEE International Conference on Software Maintenance (ICSM),,2012,,,646,649,"Mutation testing is one of the most effective techniques to evaluate the quality of a test suites. Due to its tasks and its costs, a tool to automate and reduce costs of mutation testing is required, in order to perform mutation analyses. Bacterio is a Java mutation testing tool that automates the tasks to perform mutation analyses and that implements a set of mutation techniques that reduce the costs of mutation and the execution mutant time drastically. Thus, this tool helps testers to evaluate the quality of their tests, keeping mutation cheap and fast.",1063-6773,978-1-4673-2312-3,10.1109/ICSM.2012.6405344,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6405344,mutation testing;mutation techniques;Bacterio tool;quality of tests,Java;Software testing;Graphical user interfaces;Syntactics;Educational institutions;Heuristic algorithms,Java;program testing;software quality,Bacterio;Java mutation testing tool;test suites quality;mutation analyses;execution mutant time,,6,,12,,,,,IEEE,IEEE Conferences
Mutation testing tools- An empirical study,D. Singh; B. Suri,"Guru Gobind Singh Indraprastha University, Delhi, India; Guru Gobind Singh Indraprastha University, Delhi, India",Third International Conference on Computational Intelligence and Information Technology (CIIT 2013),,2013,,,230,239,"Prevailing code coverage techniques in software testing such as condition coverage, branch coverage are thoroughness indicators, rather than the test suites capabilities to detect the fault. Mutation testing can be prospected as a fault based technique that extent the effectiveness of test suites for localization of faults. Generating and running vast number of mutants against the test cases is arduous and time- consuming. Therefore, the use of mutation testing in software industry is uncommon. Hence, an automated, fast and reliable tool for the same is required to perform mutation testing. Various Mutation testing tools exists for the software industry. In this paper, various available tools are studied and based on the study; a comparison is made between these Mutation testing tools. An inference is made that all the available tools are language dependent or need to be configured differently for different languages to generate and run test cases. Comparative study reveals that most of available Mutation testing tools are in Java language and possess many important features while less number of tools is available for other languages like C, C++, C# and FORTRAN.",,978-1-84919-859-2,10.1049/cp.2013.2596,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6950880,Mutation Testing;Mutation Testing Tools;Comparison,,DP industry;Java;program testing;software houses;software reliability,mutation testing tools;empirical analysis;code coverage techniques;software testing;condition coverage;branch coverage;thoroughness indicators;fault-based technique;fault localization;software industry;automated-fast reliable tool;Java language;C language;C++ language;C# language;FORTRAN language,,1,,,,,,,IET,IET Conferences
Testing Adequacy of Convolutional Neural Network Based on Mutation Testing,Y. Yao; J. Liu; S. Huang; Z. Hui; K. Wu; L. Chen; S. Yang; Q. Chen,"Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China; Command and Control Engineering College Army Engineering University of PLA Nanjing, China","2019 IEEE 19th International Conference on Software Quality, Reliability and Security Companion (QRS-C)",,2019,,,536,537,"It is difficult to apply traditional testing adequacy criteria when measuring the adequacy of convolutional neural network applications. However, only a small number of test cases applied to the CNN model can achieve neuron coverage of almost 100%, overturning the effectiveness of the neuronal coverage criteria. In this paper, we propose a model coverage criterion based on mutation testing for CNN, and applying model coverage criterion to a common CNN image classification models (LeNet-5). we focus on the testing accuracy of model. Experiments show that our method can find the local optimal model and play an important role in improving the testing adequacy of the set of models.",,978-1-7281-3925-8,10.1109/QRS-C.2019.00112,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8859504,"CNN, testing adequacy, mutation testing, model coverage criterion",Testing;Convolution;Kernel;Convolutional neural networks;Reliability;Training,convolutional neural nets;image classification;program testing;set theory,neuronal coverage criteria;model coverage criterion;mutation testing;local optimal model;convolutional neural network applications;testing adequacy criteria;CNN image classification models;model set,,,,2,,,,,IEEE,IEEE Conferences
A systematic review on fault based mutation testing techniques and tools for Aspect-J programs,P. K. Singh; O. P. Sangwan; A. Sharma,"JRE Group of Institutions, Greater Noida, U.P., India; School of ICT, GBU, Greater Noida, U.P., India; Krishna Institute of Engineering & Technology, Ghaziabad, U.P., India",2013 3rd IEEE International Advance Computing Conference (IACC),,2013,,,1455,1461,"Mutation technique in software testing is considered as the most fascinating way to validate the software under analysis. In last decade, many researchers developed various techniques and tools to apply mutation testing for Aspect Oriented Programs. In this paper, authors surveyed several mutation testing techniques based approaches available to test the aspect oriented programs. Along with mutation testing techniques, various AOP testing tools have also been considered and analyzed based on essential requirements need to fill by these tools, discussed by several researchers. This paper analyzed the research work on mutation testing techniques and mutation tools for aspect oriented programs. Paper considered different parameters on which the analysis of mutation testing techniques and tool is carried out. In addition of few other parameters considered for evaluation, some of the resultant metrics may vary slightly under modification in basic requirements. Based on the numeric value calculated, it is finally suggested, which mutation tool may be much better and under what circumstances.",,978-1-4673-4529-3,10.1109/IAdCC.2013.6514441,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6514441,Aspect Oriented Programs;Mutation Testing;Mutation Testing Tool;ITDs: Inter-type Declarations;Join Points;Pointcut Descriptors;Mutation Analysis,Testing;Software;Fault diagnosis;Object oriented modeling;Programming;Java;Conferences,aspect-oriented programming;fault diagnosis;program testing,fault based mutation testing techniques;fault based mutation testing tools;aspect-J programs;software testing;aspect oriented programs;AOP testing tools,,7,,36,,,,,IEEE,IEEE Conferences
Teaching Software Testing Concepts Using a Mutation Testing Game,B. S. Clegg; J. M. Rojas; G. Fraser,"Dept. of Comput. Sci., Univ. of Sheffield, Sheffield, UK; Dept. of Comput. Sci., Univ. of Sheffield, Sheffield, UK; Dept. of Comput. Sci., Univ. of Sheffield, Sheffield, UK",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET),,2017,,,33,36,"Software testing is a core aspect of software development, but testing programs systematically is not always a core aspect of software engineering education. As a result, software developers often treat testing as a liability, and overall software quality suffers. One of the reasons for this is that standard testing techniques are often perceived as boring and difficult when compared to creative programming and design activities, which dominate education. To make software testing education more enjoyable, we recently introduced the Code Defenders game, in which players engage with testing activities in a fun and competitive way. In this short paper, we explore the idea of using Code Defenders to systematically teach software testing concepts. We present a mapping of core developer testing concepts, such as statement or branch coverage, to categories of puzzles in the framework of the game. As players progress through levels of this game, they incrementally learn and practice testing concepts. By presenting software testing as an enjoyable activity, we hope that learners will not only acquire better testing skills, but will in the long term become better software engineers.",,978-1-5386-2671-9,10.1109/ICSE-SEET.2017.1,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964327,software engineering education;software testing;mutation testing,Games;Education;Software;Software testing;Software engineering;Computer bugs,computer aided instruction;computer games;computer science education;program testing;software engineering;teaching,mutation testing game;software testing education;CODE DEFENDERS game;teaching,,2,,6,,,,,IEEE,IEEE Conferences
Extended firm mutation testing: A cost reduction technique for mutation testing,M. Singh; V. M. Srivastava,"Department of Electrical, Electronic and Computer Engineering, University of KwaZulu-Natal, Durban-4041, South Africa; Department of Electrical, Electronic and Computer Engineering, University of KwaZulu-Natal, Durban-4041, South Africa",2017 Fourth International Conference on Image Information Processing (ICIIP),,2017,,,1,6,"All the white-box testing techniques are to check the quality of code but unable to test the quality of test cases. Mutation testing is the most effective testing technique to evaluate the quality of a test sets, but it also encounters a number of problems to do so. These problems prevent the mutation testing technique to become practical. The major problem is the very high computational cost that occurs due to execution of mutants. The usage of mutation testing restrict by its high computation cost. In order to the practical use to mutation testing, various cost reduction techniques were proposed. In this paper, we first investigate the advantages and disadvantages of existing cost reduction techniques and then propose a new execution based technique to reduce the cost of mutation testing.",,978-1-5090-6734-3,10.1109/ICIIP.2017.8313788,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8313788,Mutation Testing;Cost Reduction Techniques;AspectJ Programs,Software;Information processing;Software testing;Computational efficiency;Optimization;Tools,cost reduction;program testing,extended firm mutation testing;cost reduction technique;white-box testing techniques;effective testing technique;mutation testing technique,,1,,25,,,,,IEEE,IEEE Conferences
Overview of a place/transition net-based mutation testing framework to obtain test cases effective for concurrent software,T. Takagi; T. Arao,"Faculty of Engineering, Kagawa University, Takamatsu, Kagawa, Japan; Graduate School of Engineering, Kagawa University, Takamatsu, Kagawa, Japan","2015 IEEE/ACIS 16th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)",,2015,33,22,1,3,Any abstract. Two sentences.,SOMEISSSN,978-1-4799-8676-7,10.1109/SNPD.2015.7176242,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7176242,software testing;model-based testing;mutation testing;place/transition net;test case,Testing;Generators;Software;Petri nets;Algorithm design and analysis;Measurement;Conferences,Petri nets;program testing,place-transition net-based mutation testing framework;negative test case generator;concurrent software;mutant PN generator;mutation analyzer,,3,,4,,,,,IEEE,IEEE Conferences
An approach for mutation testing using elitist genetic algorithm,K. K. Mishra; S. Tiwari; A. Kumar; A. K. Misra,"Computer Science & Engineering Department, MNNIT, Allahabad, INDIA; Computer Science & Engineering Department, MNNIT, Allahabad, INDIA; Computer Science & Engineering Department, MNNIT, Allahabad, INDIA; Computer Science & Engineering Department, MNNIT, Allahabad, INDIA",2010 3rd International Conference on Computer Science and Information Technology,,2010,5,,426,429,"Mutation Testing is used as fault-based testing to overcome limitations of other testing approaches but it is recognized as expensive process. In mutation testing, a good test case is one that kills one or more mutants, by producing different mutant output from the original program. Evolutionary algorithms have been proved its suitability for reducing the cost of data generation in different testing methodologies. In order to reduce the cost of mutation testing, efficient test cases are generated that reveal faults and kill mutants. In this paper, we develop a new strategy for generating efficient test input data in the context of mutation testing.",,978-1-4244-5540-9,10.1109/ICCSIT.2010.5564072,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5564072,Mutation Testing;Genetic Algorithm;Elitist Genetic Algorithm,Algorithm design and analysis;Testing;Buildings;Heuristic algorithms;Irrigation;Genetics,genetic algorithms;program testing,mutation testing;elitist genetic algorithm;fault-based testing;evolutionary algorithms;data generation cost,,8,,17,,,,,IEEE,IEEE Conferences
Mutation Testing,P. Reales; M. Polo; J. L. Fernández-Alemán; A. Toval; M. Piattini,University of Castilla-La Mancha; University of Castilla-La Mancha; University of Murcia; University of Murcia; University of Castilla-La Mancha,IEEE Software,,2014,31,3,30,35,"This article gives a short overview of the main characteristics of mutation tools. If a test suite finds all the artificial errors inserted in the mutants and finds no fault in the original, it's likely that the program under test is free of them. Obviously, the validity of this affirmation depends on the nature of the artificial fault: some of them are better than others. This testing technique has been used in the research arena to check the effectiveness of new proposed testing techniques, but it hasn't been used until recently in industry due to its costs and the lack of knowledge and industrial tools.",1937-4194,,10.1109/MS.2014.68,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6802989,software testing;mutation testing;debugging;test suite,Java;Testing;Industries;Program processors;Optimization;Fault diagnosis,program testing,testing technique;artificial fault;program under test;mutation tools;software testing;mutation testing,,4,,6,,,,,IEEE,IEEE Magazines
A Decision-Tree Based Approach for Mutation Testing,Reena; J. Choudhary,"Deptt. Of Comput. Sc. & App., T.I.T&S Coll., Bhiwani, India; Comput. Dept., T.I.T&S Coll., Bhiwani, India",2014 International Conference on Computational Intelligence and Communication Networks,,2014,,,1173,1176,"Mutation Testing is one of the most supportive black-box testing approaches that performs the operator based analysis over the program statements to analyze the impact of work. In this work, a decision tree based work is defined to generate the possible mutation for a java program. The decision tree is here defined to reduce the test cases so that the efficiency over the operator check will be obtained. The work is here defined for both the traditional as well as class operators. The obtained results from the system shows the effective generation of test cases.",,978-1-4799-6929-6,10.1109/CICN.2014.245,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7065665,Mutation Testing;Decision tree;Mutatants,Testing;Software systems;Decision trees;Conferences;Fault diagnosis;Java,decision trees;Java;program diagnostics;program testing,decision-tree-based approach;mutation testing;supportive black-box testing approach;program statement analysis;Java program,,,,12,,,,,IEEE,IEEE Conferences
A Comparative Study of Whole Issues and Challenges in Mutation Testing,N. N. Bokaei; M. Reza Keyvanpour,"Department of Computer Engineering, Alzahra University, Tehran, Iran; Department of Computer Engineering, Alzahra University, Tehran, Iran",2019 5th Conference on Knowledge Based Engineering and Innovation (KBEI),,2019,,,745,754,"Mutation testing is a powerful and expensive method in software testing context. It is used as a test criterion to assess the quality of test suites or generate test suites which are able to kill mutants created by seeding artificial defects in the original program code. These test suites are high-quality tests with good ability to find probable faults in the program under test. Mutation testing has gained high attention recently through its superiority over other testing criteria in different aspects and is the main topic of researches in software testing area. As well as powerfulness of mutation testing, it has challenges and difficulties which are great barriers for industrial utilization. This paper provides a comprehensive classification of mutation testing issues and challenges. Furthermore, a comparative study is conducted on researches that made an effort to investigate issues and resolve challenges of mutation testing along with presenting a classification of these proposed approaches. This comparative structure suggests different research topics and makes a guideline for researchers interested in mutation testing context. This also can be used for the purpose of comparing the existing methods, selecting the best one and improving selected methods.",,978-1-7281-0872-8,10.1109/KBEI.2019.8735019,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8735019,mutation testing;software engineering;mutation testing challenges,Software testing;Test pattern generators;Syntactics;Knowledge based systems;Technological innovation,program testing,high-quality tests;mutation testing context;software testing context,,,,55,,,,,IEEE,IEEE Conferences
On the implementation of search based approach to mutation testing,M. Tuloli; B. Sitohang; B. Hendradjaya,"Institut Teknologi Bandung, Indonesia; Institut Teknologi Bandung, Indonesia; Institut Teknologi Bandung, Indonesia",2017 International Conference on Data and Software Engineering (ICoDSE),,2017,,,1,6,"As a method to measure a test case, mutation testing has become a subject of research, mostly about optimizing it using a search-based approach. At the time, there was no research about the potential obstacle of implementing a search-based approach in mutation testing. In this paper, using our previous work, we explored some alternative method to handle mutant redundancy. We use cache to improve our mutation testing tool performance, but surprisingly the cache can have other uses, to measure a search-based approach. We proposed the use of two alternative indicators to measure a search based mutation process: unique undetected mutant in population, and undetected mutant when the cache is full.",,978-1-5386-1449-5,10.1109/ICODSE.2017.8285883,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8285883,Software engineering;Software Testing;Mutation Testing;Mutation Analysis,Testing;Redundancy;Tools;Software engineering;Sociology;Statistics;Search problems,cache storage;program testing;search problems,cache;mutation testing tool performance;search based approach;test case;mutant redundancy;search based mutation process;Software Testing,,,,30,,,,,IEEE,IEEE Conferences
A critical review of mutation testing technique and hurdles,R. Saxena; A. Singhal,"Department of Computer Science & Engineering, Amity University, Uttar Pradesh, Noida, India; Department of Computer Science & Engineering, Amity University, Uttar Pradesh, Noida, India","2017 International Conference on Computing, Communication and Automation (ICCCA)",,2017,,,887,892,"Mutation testing is an approach where mutations are introduced in the program. Each change causes a slight deviation from the original program and is called a mutant. Tests are performed which reject a mutant if its behavior differs from the original. Along with designing new software test suites, it also contributes in evaluating existing software tests. This paper introduces analyses and evaluates this approach. It has focused on various theories, phases of mutation testing and various other cost reduction techniques. It also furnishes analysis and results of various development trends. Many new automated tools are now available in the market. Now Mutation testing can handle more larger and complex programs.",,978-1-5090-6471-7,10.1109/CCAA.2017.8229932,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8229932,mutation testing;hurdles,Testing;Tools;Java;Automation;Software;Couplings;Optimization,cost reduction;program testing;software cost estimation,mutation testing technique;software test suites;hurdles;cost reduction techniques,,,,50,,,,,IEEE,IEEE Conferences
"MILU: A Customizable, Runtime-Optimized Higher Order Mutation Testing Tool for the Full C Language",Y. Jia; M. Harman,"King's Coll. London, London; King's Coll. London, London",Testing: Academic & Industrial Conference - Practice and Research Techniques (taic part 2008),,2008,,,94,98,"This paper introduces MILU, a C mutation testing tool designed for both first order and higher order mutation testing. All previous mutation testing tools apply all possible mutation operators to the program under test. By contrast, MILU allows customization of the set of mutation operators to be applied. To reduce runtime cost, MILU uses a novel 'test harness' technique to embed mutants and their associated test sets into a single-invocation procedure.",,978-0-7695-3383-4,10.1109/TAIC-PART.2008.18,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4670308,MILU;mutation testing tool,Genetic mutations;Testing;Educational institutions;Runtime;Costs;Animals;Horses,C language;program testing;software tools,C language;runtime-optimized higher order mutation testing tool;mutation operator;test harness technique;single-invocation procedure;MiLu,,71,,22,,,,,IEEE,IEEE Conferences
Analyzing test case quality with mutation testing approach,Z. Nayyar; N. Rafique; N. Hashmi; N. Rashid; S. Awan,"Department of Computer Engineering, College of EME, National University of Sciences and Technology (NUST), H-12, Islamabad, Pakistan; Department of Computer Engineering, College of EME, National University of Sciences and Technology (NUST), H-12, Islamabad, Pakistan; Department of Computer Engineering, College of EME, National University of Sciences and Technology (NUST), H-12, Islamabad, Pakistan; Department of Computer Engineering, College of EME, National University of Sciences and Technology (NUST), H-12, Islamabad, Pakistan; Department of Computer Engineering, College of EME, National University of Sciences and Technology (NUST), H-12, Islamabad, Pakistan",2015 Science and Information Conference (SAI),,2015,,,902,905,"Testing is the most important process for the validation and verification of the industrialized products. Similarly, in the field of software development it counts a lot. Sometimes it becomes difficult to judge the quality of test cases especially in the case of large and complex projects, where not even a single fault is tolerable and can have more consequences. So the solution lies in performing a mutation testing process which is a type of white box testing. In the mutation testing process, the quality of test cases is analyzed by just making mutants of the original code and then by killing them. In this paper, the whole process of mutation testing approach is analyzed and then the process is applied on a piece of code to give the complete step by step description of making and killing the mutants.",,978-1-4799-8547-0,10.1109/SAI.2015.7237249,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7237249,Testing;White box testing;Mutation testing;Mutants;Test cases;Test case quality,Conferences;Software testing;Semantics;Fault diagnosis;Java;Genetic algorithms,program testing;software quality,test case quality;mutation testing approach;industrialized product;software development;white box testing;mutation testing process,,1,,16,,,,,IEEE,IEEE Conferences
A weak mutation testing framework for WS-BPEL,P. Boonyakulsrirung; T. Suwannasart,"Software Engineering Laboratory, Software Engineering, Department of Computer Engineering, Engineering Chulalongkorn University, Bangkok, Thailand; Software Engineering Laboratory, Software Engineering, Department of Computer Engineering, Engineering, Chulalongkorn University, Bangkok, Thailand",2011 Eighth International Joint Conference on Computer Science and Software Engineering (JCSSE),,2011,,,313,318,"Web Services Business Process Execution Language (WS-BPEL) is as an XML-based Web Services composition language for more complex business processes. Mutation Testing is error-based software testing in unit level which indicates efficiency of test suites. Weak mutation testing can reduce execution cost more than typical mutation testing. A few empirical studies identify its test effectiveness which was also closely to traditional mutation testing. Recently, there is a research which proposes definition of expression mutation operators for WS-BPEL, while the definitions are not completed for WS-BPEL language. Thereafter an investigation had presented more three mutation operators (Identifier replace operators, Activity operators, as well as Exceptional and event operators) which completely cover for WS-BPEL language. This paper provides a comprehensive analysis by using some mutation operators for WS-BPEL that can apply for weak mutation testing and also proposes a framework for generating mutants by using weak mutation technique. The framework can identify dead mutants and live mutants. Moreover the framework can present execution time, mutation score, and test cases effectiveness.",,978-1-4577-0687-5,10.1109/JCSSE.2011.5930140,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5930140,mutation testing;mutation operators;weak mutation testing;WS-BPEL;web services,,business data processing;Web services;XML,weak mutation testing framework;WS-BPEL;Web Services Business Process Execution Language;XML;Web services composition language;complex business process;error-based software testing;expression mutation operator;eXtensible Markup Language,,1,,18,,,,,IEEE,IEEE Conferences
Priority Path for Mutant Repairs on Mutation Testing,S. A. Arnomo; N. Binti Ibrahim,"Universitas Putera Batam,Department of Information System,Batam,Indonesia; Universitas Putera Batam,Department of Information System,Batam,Indonesia",2019 2nd International Conference on Applied Information Technology and Innovation (ICAITI),,2019,,,71,76,"Many operators are provided with the mutation testing tool. However, with many of the mutants tested it will produce many that are identified so that it requires a lot of time to repair the source code. The purpose of this study is to find the priority pathway for repairing mutants so that it is more effective when many mutants are detected on mutation testing. Mutation testing tools as material for evaluation of mutation operators are MUJAVA and PIT. The method used for evaluation is the dependency metric by including the evaluation of mutant similarities in the frequency and level of use of mutants. The results of the MUJAVA operator mutant test show that there is a priority path for mutant repair on mutation testing. The path starts from the first group improvement (AOIU, AOIS, ROR), the second group (COI, ASRS, JSD), and the third group (AORB, COR, LOI, JSI). Based on the number of followers of mutant operators, the efficiency level is 33%. The dependency value in PIT has a comprehensive value. The results show that the improved source code starts with the math mutator.",,978-1-7281-3018-7,10.1109/ICAITI48442.2019.8982158,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8982158,Mutants;Mutation Testing;Repair.,,program testing,priority path;mutant repair;mutation testing tool;priority pathway;mutation operators;mutant similarities;mutant operators;math mutator;MUJAVA operator mutant test,,,,23,,,,,IEEE,IEEE Conferences
An Analysis and Survey of the Development of Mutation Testing,Y. Jia; M. Harman,"University College London, London; University College London, London",IEEE Transactions on Software Engineering,,2011,37,5,649,678,"Mutation Testing is a fault-based software testing technique that has been widely studied for over three decades. The literature on Mutation Testing has contributed a set of approaches, tools, developments, and empirical results. This paper provides a comprehensive analysis and survey of Mutation Testing. The paper also presents the results of several development trend analyses. These analyses provide evidence that Mutation Testing techniques and tools are reaching a state of maturity and applicability, while the topic of Mutation Testing itself is the subject of increasing interest.",1939-3520,,10.1109/TSE.2010.62,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5487526,Mutation testing;survey.,Genetic mutations;Software testing;Fault detection;History;Books;Programming profession;Computer languages;Java;Educational institutions;Automata,fault diagnosis;program testing,mutation testing development;fault-based software testing technique;empirical results;comprehensive analysis;development trend analysis;mutation testing technique;mutation testing tool,,583,,264,,,,,IEEE,IEEE Journals
MuAlloy: A Mutation Testing Framework for Alloy,K. Wang; A. Sullivan; S. Khurshid,"Univ. of Texas at Austin, Austin, TX, USA; Univ. of Texas at Austin, Austin, TX, USA; Univ. of Texas at Austin, Austin, TX, USA",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),,2018,,,29,32,"Creating models of software systems and analyzing the models helps develop more reliable systems. A well-known software modeling tool-set is embodied by the declarative language Alloy and its automatic SAT-based analyzer. Recent work introduced a novel approach to testing Alloy models to validate their correctness in the spirit of traditional software testing: AUnit defined the foundations of testing (unit tests, test execution, and model coverage) for Alloy, and MuAlloy defined mutation testing (mutation operators, mutant generation, and equivalent mutant checking) for Alloy. This tool paper describes our Java implementation of MuAlloy, which is a command-line tool that we released as an open-source project on GitHub. Our experimental results show that MuAlloy is efficient and practical. The demo video for MuAlloy can be found at https://youtu.be/3lvnQKiLcLE.",2574-1934,978-1-4503-5663-3,,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449437,Alloy;Mutation Testing;AUnit;MuAlloy,Software engineering,Java;program testing,MuAlloy;creating models;software systems;reliable systems;software modeling tool-set;declarative language Alloy;automatic SAT-based analyzer;testing Alloy models;traditional software testing;unit tests;mutation testing;mutation operators;equivalent mutant checking;command-line tool,,,,14,,,,,IEEE,IEEE Conferences
Web Mutation Testing,U. Praphamontripong,"Software Eng., George Mason Univ., Fairfax, VA, USA","2012 IEEE Fifth International Conference on Software Testing, Verification and Validation",,2012,,,495,498,"Web application software uses new technologies that have novel methods for integration and state maintenance that amount to new control flow mechanisms and new variables coping. Although powerful, these bring in new problems that current testing techniques do not adequately test for. Testing individual web software component in isolation cannot detect interaction faults, which occur in communication among web software components. Improperly implementing and testing the communications among web software components is a major source of faults. As mutation analysis has been shown to be effective in testing traditional software, the proposed project will investigate the usefulness of applying mutation testing to web applications. In a preliminary study, several new web mutation operators were defined specifically for web interaction faults. These operators were implemented in a prototype tool for a feasibility study. The resulting paper appeared in Mutation 2010 and the experimental results evince that mutation analysis can potentially help create tests that are effective at finding web application faults. To improve web fault coverage, the initial set of web mutation operators will be extended and evaluated. Additional web mutation operators will be defined. I intend to validate the proposed technique, web mutation testing, by comparing with other existing approaches used for web application testing.",2159-4848,978-0-7695-4670-4,10.1109/ICST.2012.134,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6200146,Mutation testing;web application;interaction faults,Software;Software testing;Software reliability;Conferences;Prototypes,Internet;program testing;software maintenance,Web mutation testing;Web application software;software integration;state maintenance;Web software component,,,,13,,,,,IEEE,IEEE Conferences
Test suite reduction for mutation testing based on formal concept analysis,L. Li; H. Gao,"Computer and Information Engineering Institute, Shanghai Second Polytechnic University, Shanghai, 201209, China; Computing Center, Shanghai University, 200444, Shanghai, China","2015 IEEE/ACIS 16th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)",,2015,,,1,5,"Formal concept analysis (FCA) is a method used for deriving implicit relationships between objects by attributes. Aim at the expensive cost problem in mutation testing caused by the large number of mutants and large number of test cases generated to kill these mutants. This paper proposed a test suite reduce method for mutation testing based on FCA. In order to reduce the number of test cases, a test generation algorithm and three reduction rules were presented to reduce the set of test suite based on concept lattice. Results showed this approach can help to reduce the redundancy of test cases for mutation testing.",,978-1-4799-8676-7,10.1109/SNPD.2015.7176239,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7176239,mutation testing;test generation;test suite reduction;concept lattice,Testing;Context;Lattices;Algorithm design and analysis;Formal concept analysis;Minimization;Heuristic algorithms,formal concept analysis;program testing,test suite reduction;mutation testing;formal concept analysis;FCA;test generation algorithm;concept lattice,,,,13,,,,,IEEE,IEEE Conferences
Design of a Fuzzy model to detect equivalent mutants for weak and strong mutation testing,V. Bhatia; A. Singhal,"Department of CSE, ASET, Amity University, Uttar Pradesh, Noida, India; Department of CSE, ASET, Amity University, Uttar Pradesh, Noida, India",2016 International Conference on Information Technology (InCITe) - The Next Generation IT Summit on the Theme - Internet of Things: Connect your Worlds,,2016,,,1,6,"Mutation testing is a software testing technique which works on the principle of applying simple changes to a program which is known as a mutant. A mutant helps to map the effects of real faults and generate test suite which helps to detect these faults. If the faults are detected using a given test input then the mutant is said to be “killed”. If the faults are not detected thereupon the mutant is “live”. Equivalent mutants are live mutants, which will not exhibit a different output from the original program's output, no matter what test input is given. It is important to find out if a mutant is equivalent. In this paper, we have proposed a Fuzzy model for weak and strong mutation testing to find out whether a mutant is equivalent or not.",,978-1-5090-2612-8,10.1109/INCITE.2016.7857578,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7857578,software testing;mutation testing;mutant;killed;mutant;live mutant;equivalent mutant;test suite;fuzzy logic;fuzzy model;weak mutation;strong mutation,Fuzzy logic;Software;Mathematical model;Engines;Software testing;Computer bugs,fault diagnosis;fuzzy logic;program testing,software testing;test suite generation;fault detection;live mutants;program output;fuzzy model;weak mutation testing;strong mutation testing;equivalent mutant,,1,,35,,,,,IEEE,IEEE Conferences
Estimating the Total Number of Software Faults Reliability Models and Mutation Testing a Bayesian Approach,H. A. Stieber,"Nuremberg Inst. of Technol. Georg Simon Ohm, Nuremberg, Germany",2015 IEEE 39th Annual Computer Software and Applications Conference,,2015,3,,423,426,The methodology presented in this paper uses failure data from the software test and combines them with the results from mutation testing. New models based on Zipf's law are used - together with a suitable method for parameter estimation - to get interval estimates for the total number of faults. The new models have been applied to several well-known data sets and some data sets from the author. In all cases the results were excellent. The new models and the parameter estimation method are especially suitable for grouped data (interval domain data). In a next step the confidence interval above is combined - in a Bayesian way - with the results from mutation testing. Now you get a new (and better) confidence interval for the total number of faults and an assessment of the goodness of the software test.,0730-3157,978-1-4673-6564-2,10.1109/COMPSAC.2015.180,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7273397,Software testing;mutation testing;software reliability models;parameter estimation;confidence interval;minimum chi-square;Zipf's law,Testing;Mathematical model;Software reliability;Estimation;Bayes methods;Data models;Software,Bayes methods;failure analysis;program testing;software fault tolerance,software fault reliability models;mutation testing;Bayesian approach;failure data;software test;Zipf law;parameter estimation method,,2,,8,,,,,IEEE,IEEE Conferences
