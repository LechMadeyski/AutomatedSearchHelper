{"text": [{"title": "Abstract", "paragraphs": [{"sentences": ["AbstractContext: Mutation testing has been mainly analyzed regarding traditional mutation operators involving structured programming constructs common in mainstream languages, but mutations at the class level have not been assessed to the same extent.", "This fact is noteworthy in the case of C++, despite being one of the most relevant languages including object-oriented features.", "Objective: This paper provides a complete evaluation of class operators for the C++ programming language.", "MuCPP, a new system devoted to the application of mutation testing to this language, was developed to this end.", "This mutation system implements class mutation operators in a robust way, dealing with the inherent complexity of the language.", "Method: MuCPP generates the mutants by traversing the abstract syntax tree of each translation unit with the Clang API, and stores mutants as branches in the Git version control system.", "The tool is able to detect duplicate mutants, avoid system headers, and drive the compilation process.", "Then, MuCPP is used to conduct experiments with several open-source C++ programs.", "Results: The improvement rules listed in this paper to reduce unproductive class mutants have a significant impact in the computational cost of the technique.", "We also calculate the quantity and distribution of mutants generated with class operators, which generate far fewer mutants than their traditional counterparts.", "Conclusions: We show that the tests accompanying these programs cannot detect faults related to particular object-oriented features of C++.", "In order to increase the mutation score, we create new test scenarios to kill the surviving class mutants for all the applications.", "The results confirm that, while traditional mutation operators are still needed, class operators can complement them and help testers further improve the test suite."]}]}]}